[{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Covenant Code of Conduct","title":"Contributor Covenant Code of Conduct","text":"document adapted Tidyverse Code Conduct.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://www.schlosslab.org/mikropml/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"http://www.schlosslab.org/mikropml/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to mikropml","title":"Contributing to mikropml","text":"document adapted Tidyverse Contributing guide.","code":""},{"path":"http://www.schlosslab.org/mikropml/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to mikropml","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"http://www.schlosslab.org/mikropml/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to mikropml","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"http://www.schlosslab.org/mikropml/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to mikropml","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"SchlossLab/mikropml\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"http://www.schlosslab.org/mikropml/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to mikropml","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"http://www.schlosslab.org/mikropml/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to mikropml","text":"Please note mikropml project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"http://www.schlosslab.org/mikropml/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Begüm D. Topçuoğlu, Zena Lapp, Kelly L. Sovacool, Evan Snitkin, Jenna Wiens, Patrick D. Schloss Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.schlosslab.org/mikropml/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with mikropml","title":"Getting help with mikropml","text":"Thanks using mikropml! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"http://www.schlosslab.org/mikropml/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with mikropml","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"http://www.schlosslab.org/mikropml/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with mikropml","text":"Armed reprex, next step figure ask. ’s question: start Discussions, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure first asking Discussions! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"http://www.schlosslab.org/mikropml/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with mikropml","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"its-running-so-slow","dir":"Articles","previous_headings":"","what":"It’s running so slow!","title":"Introduction to mikropml","text":"Since assume lot won’t read entire vignette, ’m going say beginning. run_ml() function running super slow, consider parallelizing. See vignette(\"parallel\") examples.","code":""},{"path":[]},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"the-input-data","dir":"Articles","previous_headings":"Understanding the inputs","what":"The input data","title":"Introduction to mikropml","text":"input data run_ml() dataframe row sample observation. One column (assumed first) outcome interest, columns features. package otu_mini_bin small example dataset mikropml. , dx outcome column (normal cancer), 10 features (Otu00001 Otu00010). 2 outcomes, performing binary classification majority examples . bottom, also briefly provide examples multi-class continuous outcomes. ’ll see, run way binary classification! feature columns amount Operational Taxonomic Unit (OTU) microbiome samples patients cancer without cancer. goal predict dx, stands diagnosis. diagnosis can cancer based individual’s microbiome. need understand exactly means, ’re interested can read original paper (Topçuoğlu et al. 2020). real machine learning applications ’ll need use features, purposes vignette ’ll stick example dataset everything runs faster.","code":"# install.packages(\"devtools\") # devtools::install_github(\"SchlossLab/mikropml\") library(mikropml) head(otu_mini_bin) #>       dx Otu00001 Otu00002 Otu00003 Otu00004 Otu00005 Otu00006 Otu00007 #> 1 normal      350      268      213        1      208      230       70 #> 2 normal      568     1320       13      293      671      103       48 #> 3 normal      151      756      802      556      145      271       57 #> 4 normal      299       30     1018        0       25       99       75 #> 5 normal     1409      174        0        3        2     1136      296 #> 6 normal      167      712      213        4      332      534      139 #>   Otu00008 Otu00009 Otu00010 #> 1      230      235       64 #> 2      204      119      115 #> 3      176       37      710 #> 4       78      255      197 #> 5        1      537      533 #> 6      251      155      122"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"the-methods-we-support","dir":"Articles","previous_headings":"Understanding the inputs","what":"The methods we support","title":"Introduction to mikropml","text":"methods use supported great ML wrapper package caret, use train machine learning models. methods tested (backend packages) : Logistic/multiclass/linear regression (\"glmnet\") Random forest (\"rf\") Decision tree (\"rpart2\") Support vector machine radial basis kernel (\"svmRadial\") xgboost (\"xgbTree\") documentation methods, well many others, can look available models (see list tag). vetted models used caret, function general enough others might work. can’t promise can help models, feel free [start new discussion GitHub]https://github.com/SchlossLab/mikropml/discussions) questions models might able help. first focus glmnet, default implementation L2-regularized logistic regression. cover examples towards end.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"before-running-ml","dir":"Articles","previous_headings":"","what":"Before running ML","title":"Introduction to mikropml","text":"execute run_ml(), consider preprocessing data, either preprocess_data() function. can learn preprocessing vignette: vignette(\"preprocess\").","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"the-simplest-way-to-run_ml","dir":"Articles","previous_headings":"","what":"The simplest way to run_ml()","title":"Introduction to mikropml","text":"mentioned , minimal input dataset (dataset) machine learning model want use (method). may also want provide: outcome column name. default run_ml() pick first column, ’s best practice specify column name explicitly. seed results reproducible, get results see (.e train/test split). Say want use logistic regression, method use glmnet. , run ML pipeline : ’ll notice things: takes little run. parameters use. message stating ‘dx’ used outcome column. want, ’s nice sanity check! warning. Don’t worry warning right now - just means hyperparameters aren’t good fit - ’re interested learning , see vignette(\"tuning\"). Now, let’s dig output bit. results list 4 things: trained_model trained model caret. bunch info won’t get , can learn caret::train() documentation. test_data partition dataset used testing. machine learning, ’s always important held-test dataset used training stage. pipeline using run_ml() split data training testing sets. training data used build model (e.g. tune hyperparameters, learn data) test data used evaluate well model performs. performance dataframe (mainly) performance metrics (1 column cross-validation performance metric, several test performance metrics, 2 columns end ML method seed): using logistic regression binary classification, area receiver-operator characteristic curve (AUC) useful metric evaluate model performance. , ’s default use mikropml. However, crucial evaluate model performance using multiple metrics. can find information performance metrics use package. cv_metric_AUC AUC cross-validation folds training data. gives us sense well model performs training data. columns performance metrics test data — data wasn’t used build model. , can see AUC test data much 0.5, suggesting model predict much better chance, model overfit cross-validation AUC (cv_metric_AUC, measured training) much higher testing AUC. isn’t surprising since ’re using features example dataset, don’t discouraged. default option also provides number performance metrics might interested , including area precision-recall curve (prAUC). last columns results$performance method seed (set one) help combining results multiple runs (see vignette(\"parallel\")). feature_importance information feature importance values find_feature_importance = TRUE (default FALSE). Since used defaults, ’s nothing :","code":"results <- run_ml(otu_mini_bin,   \"glmnet\",   outcome_colname = \"dx\",   seed = 2019 ) names(results) #> [1] \"trained_model\"      \"test_data\"          \"performance\"        #> [4] \"feature_importance\" names(results$trained_model) #>  [1] \"method\"       \"modelInfo\"    \"modelType\"    \"results\"      \"pred\"         #>  [6] \"bestTune\"     \"call\"         \"dots\"         \"metric\"       \"control\"      #> [11] \"finalModel\"   \"preProcess\"   \"trainingData\" \"ptype\"        \"resample\"     #> [16] \"resampledCM\"  \"perfNames\"    \"maximize\"     \"yLimits\"      \"times\"        #> [21] \"levels\" head(results$test_data) #>        dx Otu00009 Otu00005 Otu00010 Otu00001 Otu00008 Otu00004 Otu00003 #> 9  normal      119      142      248      256      363      112      871 #> 14 normal       60      209       70       86       96        1      123 #> 16 cancer      205        5      180     1668       95       22        3 #> 17 normal      188      356      107      381     1035      915      315 #> 27 normal        4       21      161        7        1       27        8 #> 30 normal       13      166        5       31       33        5       58 #>    Otu00002 Otu00007 Otu00006 #> 9       995        0      137 #> 14      426       54       40 #> 16       20      590      570 #> 17      357      253      341 #> 27       25      322        5 #> 30      179        6       30 results$performance #> # A tibble: 1 × 17 #>   cv_metric_AUC logLoss   AUC prAUC Accuracy Kappa    F1 Sensitivity Specificity #>           <dbl>   <dbl> <dbl> <dbl>    <dbl> <dbl> <dbl>       <dbl>       <dbl> #> 1         0.622   0.684 0.647 0.606    0.590 0.179   0.6         0.6       0.579 #> # ℹ 8 more variables: Pos_Pred_Value <dbl>, Neg_Pred_Value <dbl>, #> #   Precision <dbl>, Recall <dbl>, Detection_Rate <dbl>, #> #   Balanced_Accuracy <dbl>, method <chr>, seed <dbl> results$feature_importance #> [1] \"Skipped feature importance\""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"customizing-parameters","dir":"Articles","previous_headings":"","what":"Customizing parameters","title":"Introduction to mikropml","text":"arguments allow change execute run_ml(). ’ve chosen reasonable defaults , encourage change think something else better data.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"changing-kfold-cv_times-and-training_frac","dir":"Articles","previous_headings":"Customizing parameters","what":"Changing kfold, cv_times, and training_frac","title":"Introduction to mikropml","text":"kfold: number folds run cross-validation (default: 5). cv_times: number times run repeated cross-validation (default: 100). training_frac: fraction data training set (default: 0.8). rest data used testing. ’s example change default parameters: might noticed one ran faster — ’s reduced kfold cv_times. okay testing things may even necessary smaller datasets. general may better larger numbers parameters; think defaults good starting point (Topçuoğlu et al. 2020).","code":"results_custom <- run_ml(otu_mini_bin,   \"glmnet\",   kfold = 2,   cv_times = 5,   training_frac = 0.5,   seed = 2019 ) #> Using 'dx' as the outcome column. #> Training the model... #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:mikropml': #>  #>     compare_models #> Warning in (function (w) : `caret::train()` issued the following warning: #>   #> simpleWarning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : There were missing values in resampled performance measures. #>  #> This warning usually means that the model didn't converge in some cross-validation folds because it is predicting something close to a constant. As a result, certain performance metrics can't be calculated. This suggests that some of the hyperparameters chosen are doing very poorly. #> Training complete."},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"custom-training-indices","dir":"Articles","previous_headings":"Customizing parameters > Changing kfold, cv_times, and training_frac","what":"Custom training indices","title":"Introduction to mikropml","text":"training_frac fraction 0 1, random sample observations dataset chosen training set satisfy training_frac using get_partition_indices(). However, cases might wish control exactly observations training set. can instead assign training_frac vector indices correspond rows dataset go training set (remaining sequences go testing set). ’s example ~80% data training set:","code":"n_obs <- otu_mini_bin %>% nrow() training_size <- 0.8 * n_obs training_rows <- sample(n_obs, training_size) results_custom_train <- run_ml(otu_mini_bin,   \"glmnet\",   kfold = 2,   cv_times = 5,   training_frac = training_rows,   seed = 2019 ) #> Using 'dx' as the outcome column. #> Using the custom training set indices provided by `training_frac`. #>       The fraction of data in the training set will be 0.8 #> Training the model... #> Training complete."},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"changing-the-performance-metric","dir":"Articles","previous_headings":"Customizing parameters","what":"Changing the performance metric","title":"Introduction to mikropml","text":"two arguments allow change performance metric use model evaluation, performance metrics calculate using test data. perf_metric_function function used calculate performance metrics. default classification caret::multiClassSummary() default regression caret::defaultSummary(). ’d suggest changing unless really know ’re . perf_metric_name column name output perf_metric_function. chose reasonable defaults (AUC binary, logLoss multiclass, RMSE continuous), default functions calculate bunch different performance metrics, can choose different one ’d like. default performance metrics available classification : default performance metrics available regression : ’s example using prAUC instead AUC: ’ll see cross-validation metric prAUC, instead default AUC:","code":"#>  [1] \"logLoss\"                \"AUC\"                    \"prAUC\"                  #>  [4] \"Accuracy\"               \"Kappa\"                  \"Mean_F1\"                #>  [7] \"Mean_Sensitivity\"       \"Mean_Specificity\"       \"Mean_Pos_Pred_Value\"    #> [10] \"Mean_Neg_Pred_Value\"    \"Mean_Precision\"         \"Mean_Recall\"            #> [13] \"Mean_Detection_Rate\"    \"Mean_Balanced_Accuracy\" #> [1] \"RMSE\"     \"Rsquared\" \"MAE\" results_pr <- run_ml(otu_mini_bin,   \"glmnet\",   cv_times = 5,   perf_metric_name = \"prAUC\",   seed = 2019 ) #> Using 'dx' as the outcome column. #> Training the model... #> Warning in (function (w) : `caret::train()` issued the following warning: #>   #> simpleWarning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : There were missing values in resampled performance measures. #>  #> This warning usually means that the model didn't converge in some cross-validation folds because it is predicting something close to a constant. As a result, certain performance metrics can't be calculated. This suggests that some of the hyperparameters chosen are doing very poorly. #> Training complete. results_pr$performance #> # A tibble: 1 × 17 #>   cv_metric_prAUC logLoss   AUC prAUC Accuracy  Kappa    F1 Sensitivity #>             <dbl>   <dbl> <dbl> <dbl>    <dbl>  <dbl> <dbl>       <dbl> #> 1           0.577   0.691 0.663 0.605    0.538 0.0539 0.690           1 #> # ℹ 9 more variables: Specificity <dbl>, Pos_Pred_Value <dbl>, #> #   Neg_Pred_Value <dbl>, Precision <dbl>, Recall <dbl>, Detection_Rate <dbl>, #> #   Balanced_Accuracy <dbl>, method <chr>, seed <dbl>"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"using-groups","dir":"Articles","previous_headings":"Customizing parameters","what":"Using groups","title":"Introduction to mikropml","text":"optional groups vector groups keep together splitting data train test sets cross-validation. Sometimes ’s important split data based grouping instead just randomly. allows control similarities within groups don’t want skew predictions (.e. batch effects). example, biological data may samples collected multiple hospitals, might like keep observations hospital partition. ’s example split data train/test sets based groups: one difference run_ml() report much data training set run code chunk. can little finicky depending many samples groups . won’t exactly specify training_frac, since include one group either training set test set.","code":"# make random groups set.seed(2019) grps <- sample(LETTERS[1:8], nrow(otu_mini_bin), replace = TRUE) results_grp <- run_ml(otu_mini_bin,   \"glmnet\",   cv_times = 2,   training_frac = 0.8,   groups = grps,   seed = 2019 ) #> Using 'dx' as the outcome column. #> Fraction of data in the training set: 0.795  #>  Groups in the training set: A B D F G H  #>  Groups in the testing set: C E #> Groups will be kept together in CV partitions #> Training the model... #> Training complete."},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"controlling-how-groups-are-assigned-to-partitions","dir":"Articles","previous_headings":"Customizing parameters > Using groups","what":"Controlling how groups are assigned to partitions","title":"Introduction to mikropml","text":"use groups parameter , default run_ml() assume want observations group placed partition train/test split. makes sense want use groups control batch effects. However, cases might prefer control exactly groups end partition, might even okay observations group assigned different partitions. example, say want groups B used training, C D testing, don’t preference happens groups. can give group_partitions parameter named list specify groups go training set go testing set. case, observations & B used training, C & D used testing, remaining groups randomly assigned one satisfy training_frac closely possible. another scenario, maybe want groups F used training, also want allow observations selected training F used testing: need even control , take look setting custom training indices. might also prefer provide train control scheme cross_val parameter run_ml().","code":"results_grp_part <- run_ml(otu_mini_bin,   \"glmnet\",   cv_times = 2,   training_frac = 0.8,   groups = grps,   group_partitions = list(     train = c(\"A\", \"B\"),     test = c(\"C\", \"D\")   ),   seed = 2019 ) #> Using 'dx' as the outcome column. #> Fraction of data in the training set: 0.785  #>  Groups in the training set: A B E F G H  #>  Groups in the testing set: C D #> Groups will not be kept together in CV partitions because the number of groups in the training set is not larger than `kfold` #> Training the model... #> Training complete. results_grp_trainA <- run_ml(otu_mini_bin,   \"glmnet\",   cv_times = 2,   kfold = 2,   training_frac = 0.5,   groups = grps,   group_partitions = list(     train = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),     test = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\")   ),   seed = 2019 ) #> Using 'dx' as the outcome column. #> Fraction of data in the training set: 0.5  #>  Groups in the training set: A B C D E F  #>  Groups in the testing set: A B C D E F G H #> Groups will be kept together in CV partitions #> Training the model... #> Training complete."},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"more-arguments","dir":"Articles","previous_headings":"Customizing parameters","what":"More arguments","title":"Introduction to mikropml","text":"ML methods take optional arguments, ntree randomForest-based models case weights. additional arguments give run_ml() forwarded along caret::train() can leverage options.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"case-weights","dir":"Articles","previous_headings":"Customizing parameters > More arguments","what":"Case weights","title":"Introduction to mikropml","text":"want use case weights, also need use custom indices training data (.e. perform partition run_ml() ). ’s one way weights calculated proportion class data set, ~70% data training set: See caret docs list models accept case weights.","code":"set.seed(20221016) library(dplyr) train_set_indices <- get_partition_indices(otu_mini_bin %>% pull(dx),   training_frac = 0.70 ) case_weights_dat <- otu_mini_bin %>%   count(dx) %>%   mutate(p = n / sum(n)) %>%   select(dx, p) %>%   right_join(otu_mini_bin, by = \"dx\") %>%   select(-starts_with(\"Otu\")) %>%   mutate(     row_num = row_number(),     in_train = row_num %in% train_set_indices   ) %>%   filter(in_train) head(case_weights_dat) #>       dx    p row_num in_train #> 1 cancer 0.49       1     TRUE #> 2 cancer 0.49       2     TRUE #> 3 cancer 0.49       3     TRUE #> 4 cancer 0.49       4     TRUE #> 5 cancer 0.49       5     TRUE #> 6 cancer 0.49       6     TRUE tail(case_weights_dat) #>         dx    p row_num in_train #> 136 normal 0.51     194     TRUE #> 137 normal 0.51     195     TRUE #> 138 normal 0.51     196     TRUE #> 139 normal 0.51     197     TRUE #> 140 normal 0.51     198     TRUE #> 141 normal 0.51     200     TRUE nrow(case_weights_dat) / nrow(otu_mini_bin) #> [1] 0.705 results_weighted <- run_ml(otu_mini_bin,   \"glmnet\",   outcome_colname = \"dx\",   seed = 2019,   training_frac = case_weights_dat %>% pull(row_num),   weights = case_weights_dat %>% pull(p) )"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"finding-feature-importance","dir":"Articles","previous_headings":"","what":"Finding feature importance","title":"Introduction to mikropml","text":"find features contributing predictive power, can use find_feature_importance = TRUE. use permutation importance determine feature importance described (Topçuoğlu et al. 2020). Briefly, permutes features individually (correlated ones together) evaluates much performance metric decreases. performance decreases feature randomly shuffled, important feature . default FALSE takes run useful want know features important predicting outcome. Let’s look feature importance results: Now, can check feature importances: several columns: perf_metric: performance value permuted feature. perf_metric_diff: difference performance actual permuted data (.e. test performance minus permuted performance). Features larger perf_metric_diff important. pvalue: probability obtaining actual performance value null hypothesis. lower: lower bound 95% confidence interval perf_metric. upper: upper bound 95% confidence interval perf_metric. feat: feature (group correlated features) permuted. method: ML method used. perf_metric_name: name performance metric represented perf_metric & perf_metric_diff. seed: seed (set). can see , differences negligible (close zero), makes sense since model isn’t great. ’re interested feature importance, ’s especially useful run multiple different train/test splits, shown example snakemake workflow. can also choose permute correlated features together using corr_thresh (default: 1). features correlation threshold permuted together; .e. perfectly correlated features permuted together using default value. can see features permuted together feat column. 3 features permuted together (doesn’t really make sense, ’s just example). previously executed run_ml() without feature importance now wish find feature importance fact, see example code get_feature_importance() documentation. get_feature_importance() can show live progress bar, see vignette(\"parallel\") examples.","code":"results_imp <- run_ml(otu_mini_bin,   \"rf\",   outcome_colname = \"dx\",   find_feature_importance = TRUE,   seed = 2019 ) results_imp$feature_importance #>    perf_metric perf_metric_diff     pvalue   lower   upper     feat method #> 1    0.5459125        0.0003375 0.51485149 0.49125 0.60250 Otu00001     rf #> 2    0.5682625       -0.0220125 0.72277228 0.50625 0.63125 Otu00002     rf #> 3    0.5482875       -0.0020375 0.55445545 0.50500 0.59000 Otu00003     rf #> 4    0.6314375       -0.0851875 1.00000000 0.55250 0.71250 Otu00004     rf #> 5    0.4991750        0.0470750 0.08910891 0.44125 0.57125 Otu00005     rf #> 6    0.5364875        0.0097625 0.28712871 0.50125 0.57375 Otu00006     rf #> 7    0.5382875        0.0079625 0.39603960 0.47500 0.58750 Otu00007     rf #> 8    0.5160500        0.0302000 0.09900990 0.46750 0.55750 Otu00008     rf #> 9    0.5293375        0.0169125 0.16831683 0.49500 0.55625 Otu00009     rf #> 10   0.4976500        0.0486000 0.12871287 0.41000 0.56250 Otu00010     rf #>    perf_metric_name seed #> 1               AUC 2019 #> 2               AUC 2019 #> 3               AUC 2019 #> 4               AUC 2019 #> 5               AUC 2019 #> 6               AUC 2019 #> 7               AUC 2019 #> 8               AUC 2019 #> 9               AUC 2019 #> 10              AUC 2019 results_imp_corr <- run_ml(otu_mini_bin,   \"glmnet\",   cv_times = 5,   find_feature_importance = TRUE,   corr_thresh = 0.2,   seed = 2019 ) #> Using 'dx' as the outcome column. #> Training the model... #> Warning in (function (w) : `caret::train()` issued the following warning: #>   #> simpleWarning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : There were missing values in resampled performance measures. #>  #> This warning usually means that the model didn't converge in some cross-validation folds because it is predicting something close to a constant. As a result, certain performance metrics can't be calculated. This suggests that some of the hyperparameters chosen are doing very poorly. #> Training complete. #> Finding feature importance... #> Feature importance complete. results_imp_corr$feature_importance #>   perf_metric perf_metric_diff     pvalue     lower     upper #> 1   0.4941842        0.1531842 0.05940594 0.3236842 0.6473684 #>                                                                                        feat #> 1 Otu00001|Otu00002|Otu00003|Otu00004|Otu00005|Otu00006|Otu00007|Otu00008|Otu00009|Otu00010 #>   method perf_metric_name seed #> 1 glmnet              AUC 2019"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"tuning-hyperparameters-using-the-hyperparameter-argument","dir":"Articles","previous_headings":"","what":"Tuning hyperparameters (using the hyperparameter argument)","title":"Introduction to mikropml","text":"important, whole vignette . bottom line provide default hyperparameters can start , ’s important tune hyperparameters. information default hyperparameters , tune hyperparameters, see vignette(\"tuning\").","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"other-models","dir":"Articles","previous_headings":"","what":"Other models","title":"Introduction to mikropml","text":"examples train evaluate models. output similar, won’t go details.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"random-forest","dir":"Articles","previous_headings":"Other models","what":"Random forest","title":"Introduction to mikropml","text":"rf engine takes optional argument ntree: number trees use random forest. can’t tuned using rf package implementation random forest. Please refer caret documentation interested packages random forest implementations.","code":"results_rf <- run_ml(otu_mini_bin,   \"rf\",   cv_times = 5,   seed = 2019 ) results_rf_nt <- run_ml(otu_mini_bin,   \"rf\",   cv_times = 5,   ntree = 1000,   seed = 2019 )"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"decision-tree","dir":"Articles","previous_headings":"Other models","what":"Decision tree","title":"Introduction to mikropml","text":"","code":"results_dt <- run_ml(otu_mini_bin,   \"rpart2\",   cv_times = 5,   seed = 2019 )"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"svm","dir":"Articles","previous_headings":"Other models","what":"SVM","title":"Introduction to mikropml","text":"get message “maximum number iterations reached”, see issue caret.","code":"results_svm <- run_ml(otu_mini_bin,   \"svmRadial\",   cv_times = 5,   seed = 2019 )"},{"path":[]},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"multiclass-data","dir":"Articles","previous_headings":"Other data","what":"Multiclass data","title":"Introduction to mikropml","text":"provide otu_mini_multi multiclass outcome (three outcomes): ’s example running multiclass data: performance metrics slightly different, format everything else :","code":"otu_mini_multi %>%   dplyr::pull(\"dx\") %>%   unique() #> [1] \"adenoma\"   \"carcinoma\" \"normal\" results_multi <- run_ml(otu_mini_multi,   outcome_colname = \"dx\",   seed = 2019 ) results_multi$performance #> # A tibble: 1 × 17 #>   cv_metric_logLoss logLoss   AUC prAUC Accuracy  Kappa Mean_F1 Mean_Sensitivity #>               <dbl>   <dbl> <dbl> <dbl>    <dbl>  <dbl> <chr>              <dbl> #> 1              1.07    1.11 0.506 0.353    0.382 0.0449 NA                 0.360 #> # ℹ 9 more variables: Mean_Specificity <dbl>, Mean_Pos_Pred_Value <chr>, #> #   Mean_Neg_Pred_Value <dbl>, Mean_Precision <chr>, Mean_Recall <dbl>, #> #   Mean_Detection_Rate <dbl>, Mean_Balanced_Accuracy <dbl>, method <chr>, #> #   seed <dbl>"},{"path":"http://www.schlosslab.org/mikropml/articles/introduction.html","id":"continuous-data","dir":"Articles","previous_headings":"Other data","what":"Continuous data","title":"Introduction to mikropml","text":"’s example running continuous data, outcome column numerical: , performance metrics slightly different, format rest :","code":"results_cont <- run_ml(otu_mini_bin[, 2:11],   \"glmnet\",   outcome_colname = \"Otu00001\",   seed = 2019 ) results_cont$performance #> # A tibble: 1 × 6 #>   cv_metric_RMSE  RMSE Rsquared   MAE method  seed #>            <dbl> <dbl>    <dbl> <dbl> <chr>  <dbl> #> 1           622.  731.   0.0893  472. glmnet  2019"},{"path":[]},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"Machine learning (ML) classification prediction based set features used make decisions healthcare, economics, criminal justice . However, implementing ML pipeline including preprocessing, model selection, evaluation can time-consuming, confusing, difficult. , present mikropml (pronounced “meek-ROPE em el”), easy--use R package implements ML pipelines using regression, support vector machines, decision trees, random forest, gradient-boosted trees. package available GitHub, CRAN, conda.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"statement-of-need","dir":"Articles","previous_headings":"","what":"Statement of need","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"applications machine learning (ML) require reproducible steps data pre-processing, cross-validation, testing, model evaluation, often interpretation model makes particular predictions. Performing steps important, failure implement can result incorrect misleading results (Teschendorff 2019; Wiens et al. 2019). Supervised ML widely used recognize patterns large datasets make predictions outcomes interest. Several packages including caret (Kuhn 2008) tidymodels (Kuhn, Wickham, RStudio 2020) R, scikitlearn (Pedregosa et al. 2011) Python, H2O autoML platform (H2O.ai 2020) allow scientists train ML models variety algorithms. packages provide tools necessary ML step, implement complete ML pipeline according good practices literature. makes difficult practitioners new ML easily begin perform ML analyses. enable broader range researchers apply ML problem domains, created mikropml, easy--use R package (R Core Team 2020) implements ML pipeline created Topçuoğlu et al. (Topçuoğlu et al. 2020) single function returns trained model, model performance metrics feature importance. mikropml leverages caret package support several ML algorithms: linear regression, logistic regression, support vector machines radial basis kernel, decision trees, random forest, gradient boosted trees. incorporates good practices ML training, testing, model evaluation (Topçuoğlu et al. 2020; Teschendorff 2019). Furthermore, provides data preprocessing steps based FIDDLE (FlexIble Data-Driven pipeLinE) framework outlined Tang et al. (Tang et al. 2020) post-training permutation importance steps estimate importance feature models trained (Breiman 2001; Fisher, Rudin, Dominici 2018). mikropml can used starting point application ML datasets many different fields. already applied microbiome data categorize patients colorectal cancer (Topçuoğlu et al. 2020), identify differences genomic clinical features associated bacterial infections (Lapp et al. 2020), predict gender-based biases academic publishing (Hagan et al. 2020).","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"mikropml-package","dir":"Articles","previous_headings":"","what":"mikropml package","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"mikropml package includes functionality preprocess data, train ML models, evaluate model performance, quantify feature importance (Figure 1). also provide vignettes example Snakemake workflow (Köster Rahmann 2012) showcase run ideal ML pipeline multiple different train/test data splits. results can visualized using helper functions use ggplot2 (Wickham 2016). mikropml allows users get started quickly facilitates reproducibility, replacement understanding ML workflow still necessary interpreting results (Pollard et al. 2019). facilitate understanding enable one tailor code application, heavily commented code provided supporting documentation can read online.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"preprocessing-data","dir":"Articles","previous_headings":"mikropml package","what":"Preprocessing data","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"provide function preprocess_data() preprocess features using several different functions caret package. preprocess_data() takes continuous categorical data, re-factors categorical data binary features, provides options normalize continuous data, remove features near-zero variance, keep one instance perfectly correlated features. set default options based implemented FIDDLE (Tang et al. 2020). details use preprocess_data() can found accompanying vignette.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"running-ml","dir":"Articles","previous_headings":"mikropml package","what":"Running ML","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"main function mikropml, run_ml(), minimally takes model choice data frame outcome column feature columns. model choice, mikropml currently supports logistic linear regression (glmnet: Friedman, Hastie, Tibshirani 2010), support vector machines radial basis kernel (kernlab: Karatzoglou et al. 2004), decision trees (rpart: Therneau et al. 2019), random forest (randomForest: Liaw Wiener 2002), gradient-boosted trees (xgboost: Chen et al. 2020). run_ml() randomly splits data train test sets maintaining distribution outcomes found full dataset. also provides option split data train test sets based categorical variables (e.g. batch, geographic location, etc.). mikropml uses caret package (Kuhn 2008) train evaluate models, optionally quantifies feature importance. output includes best model built based tuning hyperparameters internal repeated cross-validation step, model evaluation metrics, optional feature importances. Feature importances calculated using permutation test, breaks relationship feature true outcome test data, measures change model performance. provides intuitive metric individual features influence model performance comparable across model types, particularly useful model interpretation (Topçuoğlu et al. 2020). introductory vignette contains comprehensive tutorial use run_ml().","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"ideal-workflow-for-running-mikropml-with-many-different-traintest-splits","dir":"Articles","previous_headings":"mikropml package","what":"Ideal workflow for running mikropml with many different train/test splits","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"investigate variation model performance depending train test set used (Topçuoğlu et al. 2020; Lapp et al. 2020), provide examples run_ml() many times different train/test splits get summary information model performance local computer high-performance computing cluster using Snakemake workflow.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"tuning-visualization","dir":"Articles","previous_headings":"mikropml package","what":"Tuning & visualization","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"One particularly important aspect ML hyperparameter tuning. provide reasonable range default hyperparameters model type. However practitioners explore whether range appropriate data, customize hyperparameter range. Therefore, provide function plot_hp_performance() plot cross-validation performance metric single model models built using different train/test splits. helps evaluate hyperparameter range searched exhaustively allows user pick ideal set. also provide summary plots test performance metrics many train/test splits different models using plot_model_performance(). Examples described accompanying vignette hyperparameter tuning.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"dependencies","dir":"Articles","previous_headings":"mikropml package","what":"Dependencies","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"mikropml written R (R Core Team 2020) depends several packages: dplyr (Wickham et al. 2020), rlang (Henry, Wickham, RStudio 2020) caret (Kuhn 2008). ML algorithms supported mikropml require: glmnet (Friedman, Hastie, Tibshirani 2010), e1071 (Meyer et al. 2020), MLmetrics (Yan 2016) logistic regression, rpart2 (Therneau et al. 2019) decision trees, randomForest (Liaw Wiener 2002) random forest, xgboost (Chen et al. 2020) xgboost, kernlab (Karatzoglou et al. 2004) support vector machines. also allow parallelization cross-validation steps using foreach, doFuture, future.apply, future packages (Bengtsson Team 2020). Finally, use ggplot2 plotting (Wickham 2016).","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"thank members Schloss Lab participated code clubs related initial development pipeline, made documentation improvements, provided general feedback. also thank Nick Lesniak designing mikropml logo. thank US Research Software Sustainability Institute (NSF #1743188) providing training KLS Winter School Research Software Engineering.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"funding","dir":"Articles","previous_headings":"","what":"Funding","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"Salary support PDS came NIH grant 1R01CA215574. KLS received support NIH Training Program Bioinformatics (T32 GM070449). ZL received support National Science Foundation Graduate Research Fellowship Program Grant . DGE 1256260. opinions, findings, conclusions recommendations expressed material authors necessarily reflect views National Science Foundation.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"author-contributions","dir":"Articles","previous_headings":"","what":"Author contributions","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"BDT, ZL, KLS contributed equally. Author order among co-first authors determined time since joining project. BDT, ZL, KLS conceptualized study wrote code. KLS structured code R package form. BDT, ZL, JW, PDS developed methodology. PDS, ES, JW supervised project. BDT, ZL, KLS wrote original draft. authors reviewed edited manuscript.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/paper.html","id":"conflicts-of-interest","dir":"Articles","previous_headings":"","what":"Conflicts of interest","title":"mikropml: User-Friendly R Package for Supervised Machine Learning Pipelines","text":"None.","code":""},{"path":[]},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"speed-up-single-runs","dir":"Articles","previous_headings":"","what":"Speed up single runs","title":"Parallel processing","text":"default, preprocess_data(), run_ml(), compare_models() use one process series. ’d like parallelize various steps pipeline make run faster, install foreach, future, future.apply, doFuture. , register future plan prior calling functions: , used multicore plan split work across 2 cores. See future documentation picking best plan use case. Notably, multicore work inside RStudio Windows; need use multisession instead cases. registering future plan, can call preprocess_data() run_ml() usual, run certain tasks parallel. ’s also parallel version rf engine called parRF trains trees forest parallel. See caret docs information.","code":"doFuture::registerDoFuture() future::plan(future::multicore, workers = 2) otu_data_preproc <- preprocess_data(otu_mini_bin, \"dx\")$dat_transformed result1 <- run_ml(otu_data_preproc, \"glmnet\", seed = 2019)"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"bootstrap-performance","dir":"Articles","previous_headings":"Speed up single runs","what":"Bootstrap performance","title":"Parallel processing","text":"intend call run_ml() generate one train/test split (e.g. temporal split dataset), can evaluate model performance bootstrapping test set. show generate 100 bootstraps calculate confidence interval model performance. use 100 computation speed, recommended generate 10000 bootstraps precise estimation confidence interval.","code":"boot_perf <- bootstrap_performance(result1,   outcome_colname = \"dx\",   bootstrap_times = 100, alpha = 0.05 ) boot_perf #> # A tibble: 15 × 6 #>    term              .lower .estimate .upper .alpha .method    #>    <chr>              <dbl>     <dbl>  <dbl>  <dbl> <chr>      #>  1 AUC                0.449     0.631  0.807   0.05 percentile #>  2 Accuracy           0.436     0.583  0.718   0.05 percentile #>  3 Balanced_Accuracy  0.430     0.581  0.720   0.05 percentile #>  4 Detection_Rate     0.179     0.299  0.449   0.05 percentile #>  5 F1                 0.412     0.583  0.747   0.05 percentile #>  6 Kappa             -0.142     0.159  0.434   0.05 percentile #>  7 Neg_Pred_Value     0.334     0.571  0.732   0.05 percentile #>  8 Pos_Pred_Value     0.359     0.591  0.805   0.05 percentile #>  9 Precision          0.359     0.591  0.805   0.05 percentile #> 10 Recall             0.394     0.585  0.773   0.05 percentile #> 11 Sensitivity        0.394     0.585  0.773   0.05 percentile #> 12 Specificity        0.308     0.577  0.805   0.05 percentile #> 13 cv_metric_AUC      0.622     0.622  0.622   0.05 percentile #> 14 logLoss            0.661     0.687  0.708   0.05 percentile #> 15 prAUC              0.447     0.576  0.715   0.05 percentile"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"call-run_ml-multiple-times-in-parallel-in-r","dir":"Articles","previous_headings":"","what":"Call run_ml() multiple times in parallel in R","title":"Parallel processing","text":"can use functions future.apply package call run_ml() multiple times parallel different parameters. first need run future::plan() haven’t already. , call run_ml() multiple seeds using future_lapply(): call run_ml() different seed uses different random split data training testing sets. Since using seeds, must set future.seed TRUE (see future.apply documentation blog post details parallel-safe random seeds). example uses seeds speed simplicity, real data recommend using many seeds get better estimate model performance. examples, used functions future.apply package run_ml() parallel, can accomplish thing parallel versions purrr::map() functions using furrr package (e.g. furrr::future_map_dfr()). Extract performance results combine one dataframe seeds:","code":"# NOTE: use more seeds for real-world data results_multi <- future.apply::future_lapply(seq(100, 102), function(seed) {   run_ml(otu_data_preproc, \"glmnet\", seed = seed) }, future.seed = TRUE) #> Using 'dx' as the outcome column. #> Training the model... #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:purrr': #>  #>     lift #> The following object is masked from 'package:future': #>  #>     cluster #> The following object is masked from 'package:mikropml': #>  #>     compare_models #> Training complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. perf_df <- future.apply::future_lapply(results_multi,   function(result) {     result[[\"performance\"]] %>%       select(cv_metric_AUC, AUC, method)   },   future.seed = TRUE ) %>%   dplyr::bind_rows() perf_df #> # A tibble: 3 × 3 #>   cv_metric_AUC   AUC method #>           <dbl> <dbl> <chr>  #> 1         0.630 0.634 glmnet #> 2         0.591 0.608 glmnet #> 3         0.671 0.471 glmnet"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"multiple-ml-methods","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R","what":"Multiple ML methods","title":"Parallel processing","text":"may also wish compare performance different ML methods. mapply() can iterate multiple lists vectors, future_mapply() works way:","code":"# NOTE: use more seeds for real-world data param_grid <- expand.grid(   seeds = seq(100, 103),   methods = c(\"glmnet\", \"rf\") ) results_mtx <- future.apply::future_mapply(   function(seed, method) {     run_ml(otu_data_preproc,       method,       seed = seed,       find_feature_importance = TRUE     )   },   param_grid$seeds,   param_grid$methods %>% as.character(),   future.seed = TRUE ) #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Finding feature importance... #> Feature importance complete."},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"visualize-the-results","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R","what":"Visualize the results","title":"Parallel processing","text":"ggplot2 required use plotting functions . can also create plots however like using results data.","code":""},{"path":[]},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"mean-auc","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R > Visualize the results > Performance","what":"Mean AUC","title":"Parallel processing","text":"plot_model_performance() returns ggplot2 object. can add layers customize plot:","code":"perf_df <- lapply(   results_mtx[\"performance\", ],   function(x) {     x %>% select(cv_metric_AUC, AUC, method)   } ) %>%   dplyr::bind_rows()  perf_boxplot <- plot_model_performance(perf_df) perf_boxplot perf_boxplot +   theme_classic() +   scale_color_brewer(palette = \"Dark2\") +   coord_flip()"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"roc-and-prc-curves","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R > Visualize the results > Performance","what":"ROC and PRC curves","title":"Parallel processing","text":"First calculate sensitivity, specificity, precision models.","code":"get_sensspec_seed <- function(colnum) {   result <- results_mtx[, colnum]   trained_model <- result$trained_model   test_data <- result$test_data   seed <- result$performance$seed   method <- result$trained_model$method   sensspec <- calc_model_sensspec(     trained_model,     test_data,     \"dx\"   ) %>%     mutate(seed = seed, method = method)   return(sensspec) } sensspec_dat <- purrr::map_dfr(   seq(1, dim(results_mtx)[2]),   get_sensspec_seed ) #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column. #> Using 'dx' as the outcome column."},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"plot-curves-for-a-single-model","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"Parallel processing","text":"","code":"sensspec_1 <- sensspec_dat %>% filter(seed == 100, method == \"glmnet\") sensspec_1 %>%   ggplot(aes(x = specificity, y = sensitivity, )) +   geom_line() +   geom_abline(     intercept = 1, slope = 1,     linetype = \"dashed\", color = \"grey50\"   ) +   coord_equal() +   scale_x_reverse(expand = c(0, 0), limits = c(1.01, -0.01)) +   scale_y_continuous(expand = c(0, 0), limits = c(-0.01, 1.01)) +   labs(x = \"Specificity\", y = \"Sensitivity\") +   theme_bw() +   theme(legend.title = element_blank()) baseline_precision_otu <- calc_baseline_precision(   otu_data_preproc,   \"dx\", \"cancer\" ) #> Using 'dx' as the outcome column. sensspec_1 %>%   rename(recall = sensitivity) %>%   ggplot(aes(x = recall, y = precision, )) +   geom_line() +   geom_hline(     yintercept = baseline_precision_otu,     linetype = \"dashed\", color = \"grey50\"   ) +   coord_equal() +   scale_x_continuous(expand = c(0, 0), limits = c(-0.01, 1.01)) +   scale_y_continuous(expand = c(0, 0), limits = c(-0.01, 1.01)) +   labs(x = \"Recall\", y = \"Precision\") +   theme_bw() +   theme(legend.title = element_blank())"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"plot-mean-roc-and-prc-for-all-models","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"Parallel processing","text":"","code":"sensspec_dat %>%   calc_mean_roc() %>%   plot_mean_roc() sensspec_dat %>%   calc_mean_prc() %>%   plot_mean_prc(baseline_precision = baseline_precision_otu)"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"feature-importance","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R > Visualize the results","what":"Feature importance","title":"Parallel processing","text":"perf_metric_diff feature importance data frame contains differences performance actual test data performance permuted test data (.e. test minus permuted). feature important model performance, expect perf_metric_diff positive. words, features resulted largest decrease performance permuted important features.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"feature-importance-for-multiple-models","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R > Visualize the results > Feature importance","what":"Feature importance for multiple models","title":"Parallel processing","text":"can select top n important features models plot like :  See docs get_feature_importance() details values computed.","code":"feat_df <- results_mtx[\"feature_importance\", ] %>%   dplyr::bind_rows()  top_n <- 5 top_feats <- feat_df %>%   group_by(method, feat) %>%   summarize(mean_diff = median(perf_metric_diff)) %>%   filter(mean_diff > 0) %>%   slice_max(order_by = mean_diff, n = top_n) #> `summarise()` has grouped output by 'method'. You can override using the #> `.groups` argument.  feat_df %>%   right_join(top_feats, by = c(\"method\", \"feat\")) %>%   mutate(features = forcats::fct_reorder(factor(feat), mean_diff)) %>%   ggplot(aes(x = perf_metric_diff, y = features, color = method)) +   geom_boxplot() +   geom_vline(xintercept = 0, linetype = \"dashed\") +   labs(     x = \"Decrease in performance (actual minus permutation)\",     y = \"Features\",     caption = \"Features which have a lower performance when permuted have a        difference in performance above zero. The features with the greatest        decrease are the most important for model performance.\" %>%       stringr::str_wrap(width = 100)   ) +   theme_bw() +   theme(plot.caption = element_text(hjust = 0))"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"feature-importance-for-a-single-model","dir":"Articles","previous_headings":"Call run_ml() multiple times in parallel in R > Visualize the results > Feature importance","what":"Feature importance for a single model","title":"Parallel processing","text":"can also plot feature importance single model. report actual performance, permutation performance, empirical 95% confidence interval permutation performance.","code":"feat_imp_1 <- results_mtx[, 1][[\"feature_importance\"]] perf_metric_name <- results_mtx[, 1][[\"trained_model\"]]$metric perf_actual <- results_mtx[, 1][[\"performance\"]] %>% pull(perf_metric_name)  feat_imp_1 %>%   filter(perf_metric_diff > 0) %>%   mutate(feat = if_else(pvalue < 0.05, paste0(\"*\", feat), as.character(feat)) %>%     as.factor() %>%     forcats::fct_reorder(perf_metric_diff)) %>%   ggplot(aes(x = perf_metric, xmin = lower, xmax = upper, y = feat)) +   geom_pointrange() +   geom_vline(xintercept = perf_actual, linetype = \"dashed\") +   labs(     x = \"Permutation performance\",     y = \"Features\",     caption = \"The dashed line represents the actual performance on the          test set. Features which have a lower performance when permuted are          important for model performance. Significant features (pvalue < 0.05)          are marked with an asterisk (*). Error bars represent the 95%          confidence interval.\" %>% stringr::str_wrap(width = 110)   ) +   theme_bw() +   theme(plot.caption = element_text(hjust = 0))"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"live-progress-updates","dir":"Articles","previous_headings":"","what":"Live progress updates","title":"Parallel processing","text":"preprocess_data() get_feature_importance() support reporting live progress updates using progressr package. format , recommend using progress bar like : Note future backends support “near-live” progress updates, meaning progress may reported immediately parallel processing futures. Read progressr vignette. progressr customize format progress updates, see progressr docs.","code":"# optionally, specify the progress bar format with the `progress` package. progressr::handlers(progressr::handler_progress(   format = \":message :bar :percent | elapsed: :elapsed | eta: :eta\",   clear = FALSE,   show_after = 0 )) # tell progressr to always report progress in any functions that use it. # set this to FALSE to turn it back off again. progressr::handlers(global = TRUE)  # run your code and watch the live progress updates. dat <- preprocess_data(otu_mini_bin, \"dx\")$dat_transformed #> Using 'dx' as the outcome column. #> preprocessing ========================>-------  78% | elapsed:  1s | eta:  0s results <- run_ml(dat, \"glmnet\",   kfold = 2, cv_times = 2,   find_feature_importance = TRUE ) #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Feature importance =========================== 100% | elapsed: 37s | eta:  0s"},{"path":"http://www.schlosslab.org/mikropml/articles/parallel.html","id":"parallelizing-with-snakemake","dir":"Articles","previous_headings":"","what":"Parallelizing with Snakemake","title":"Parallel processing","text":"parallelizing multiple calls run_ml() R examples , results objects held memory. isn’t big deal small dataset run seeds. However, large datasets run parallel , say, 100 seeds (recommended), may run problems trying store objects memory . Using workflow manager Snakemake Nextflow highly recommend maximize scalability reproducibility computational analyses. created template Snakemake workflow can use starting point ML project.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"its-running-so-slow","dir":"Articles","previous_headings":"","what":"It’s running so slow!","title":"Preprocessing data","text":"Since assume lot won’t read entire vignette, ’m going say beginning. preprocess_data() function running super slow, consider parallelizing goes faster! preprocess_data() also can report live progress updates. See vignette(\"parallel\") details.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Preprocessing data","text":"’re going start simple get complicated, want whole shebang , just scroll bottom. First, load mikropml:","code":"library(mikropml)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"binary-data","dir":"Articles","previous_headings":"Examples","what":"Binary data","title":"Preprocessing data","text":"Let’s start binary variables: addition dataframe , provide name outcome column preprocess_data(). ’s preprocessed data looks like: output list: dat_transformed transformed data, grp_feats list grouped features, removed_feats list features removed. , grp_feats NULL perfectly correlated features (e.g. c(0,1,0) c(0,1,0), c(0,1,0) c(1,0,1) - see details). first column (var1) dat_transformed character changed var1_yes zeros () ones (yes). values second column (var2) stay ’s already binary, name changes var2_1. third column (var3) factor also changed binary b 1 0, denoted new column name var3_b.","code":"# raw binary dataset bin_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"no\", \"yes\", \"no\"),   var2 = c(0, 1, 1),   var3 = factor(c(\"a\", \"a\", \"b\")) ) bin_df #>   outcome var1 var2 var3 #> 1  normal   no    0    a #> 2  normal  yes    1    a #> 3  cancer   no    1    b # preprocess raw binary data preprocess_data(dataset = bin_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 4 #>   outcome var1_yes var2_1 var3_b #>   <chr>      <dbl>  <dbl>  <dbl> #> 1 normal         0      0      0 #> 2 normal         1      1      0 #> 3 cancer         0      1      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"categorical-data","dir":"Articles","previous_headings":"Examples","what":"Categorical data","title":"Preprocessing data","text":"non-binary categorical data: can see, variable split 3 different columns - one type (, b, c). , grp_feats NULL.","code":"# raw categorical dataset cat_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"a\", \"b\", \"c\") ) cat_df #>   outcome var1 #> 1  normal    a #> 2  normal    b #> 3  cancer    c # preprocess raw categorical data preprocess_data(dataset = cat_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 4 #>   outcome var1_a var1_b var1_c #>   <chr>    <dbl>  <dbl>  <dbl> #> 1 normal       1      0      0 #> 2 normal       0      1      0 #> 3 cancer       0      0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"continuous-data","dir":"Articles","previous_headings":"Examples","what":"Continuous data","title":"Preprocessing data","text":"Now, looking continuous variables: Wow! numbers change? default normalize data using \"center\" \"scale\". often best practice, may want normalize data, may want normalize data different way. don’t want normalize data, can use method=NULL: can also normalize data different ways. can choose method supported method argument caret::preProcess() (see caret::preProcess() docs details). Note methods applied continuous variables. Another feature preprocess_data() provide continuous variables characters, converted numeric: don’t want happen, want character data remain character data even can converted numeric, can use to_numeric=FALSE kept categorical: can see output, case features treated groups rather numbers (e.g. normalized).","code":"# raw continuous dataset cont_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(1, 2, 3) ) cont_df #>   outcome var1 #> 1  normal    1 #> 2  normal    2 #> 3  cancer    3 # preprocess raw continuous data preprocess_data(dataset = cont_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 2 #>   outcome  var1 #>   <chr>   <dbl> #> 1 normal     -1 #> 2 normal      0 #> 3 cancer      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0) # preprocess raw continuous data, no normalization preprocess_data(dataset = cont_df, outcome_colname = \"outcome\", method = NULL) # raw continuous dataset as characters cont_char_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"1\", \"2\", \"3\") ) cont_char_df #>   outcome var1 #> 1  normal    1 #> 2  normal    2 #> 3  cancer    3 # preprocess raw continuous character data as numeric preprocess_data(dataset = cont_char_df, outcome_colname = \"outcome\") # preprocess raw continuous character data as characters preprocess_data(dataset = cont_char_df, outcome_colname = \"outcome\", to_numeric = FALSE) #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 4 #>   outcome var1_1 var1_2 var1_3 #>   <chr>    <dbl>  <dbl>  <dbl> #> 1 normal       1      0      0 #> 2 normal       0      1      0 #> 3 cancer       0      0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"collapse-perfectly-correlated-features","dir":"Articles","previous_headings":"Examples","what":"Collapse perfectly correlated features","title":"Preprocessing data","text":"default, preprocess_data() collapses features perfectly positively negatively correlated. multiple copies features add information machine learning, makes run_ml faster. can see, end one variable, 3 grouped together. Also, second element list longer NULL. Instead, tells grp1 contains var1, var2, var3. want group positively correlated features, negatively correlated features (e.g. interpretability, another downstream application), can using group_neg_corr=FALSE: , var3 kept ’s ’s negatively correlated var1 var2. can also choose keep features separate, even perfectly correlated, using collapse_corr_feats=FALSE: case, grp_feats always NULL.","code":"# raw correlated dataset corr_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"no\", \"yes\", \"no\"),   var2 = c(0, 1, 0),   var3 = c(1, 0, 1) ) corr_df #>   outcome var1 var2 var3 #> 1  normal   no    0    1 #> 2  normal  yes    1    0 #> 3  cancer   no    0    1 # preprocess raw correlated dataset preprocess_data(dataset = corr_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 2 #>   outcome  grp1 #>   <chr>   <dbl> #> 1 normal      0 #> 2 normal      1 #> 3 cancer      0 #>  #> $grp_feats #> $grp_feats$grp1 #> [1] \"var1_yes\" \"var3_1\"   #>  #>  #> $removed_feats #> [1] \"var2\" # preprocess raw correlated dataset; don't group negatively correlated features preprocess_data(dataset = corr_df, outcome_colname = \"outcome\", group_neg_corr = FALSE) #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_yes var3_1 #>   <chr>      <dbl>  <dbl> #> 1 normal         0      1 #> 2 normal         1      0 #> 3 cancer         0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var2\" # preprocess raw correlated dataset; don't group negatively correlated features preprocess_data(dataset = corr_df, outcome_colname = \"outcome\", collapse_corr_feats = FALSE) #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_yes var3_1 #>   <chr>      <dbl>  <dbl> #> 1 normal         0      1 #> 2 normal         1      0 #> 3 cancer         0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var2\""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"data-with-near-zero-variance","dir":"Articles","previous_headings":"Examples","what":"Data with near-zero variance","title":"Preprocessing data","text":"variables zero, “”? ones won’t contribute information, remove : , var3, var4, var5 variability, variables removed preprocessing: can read caret::preProcess() documentation information. default, remove features “near-zero variance” (remove_var='nzv'). uses default arguments caret::nearZeroVar(). However, particularly smaller datasets, might want remove features near-zero variance. want remove features zero variance, can use remove_var='zv': want include features, can use argument remove_zv=NULL. work, collapse correlated features (otherwise errors underlying caret function use). want nuanced remove near-zero variance features (e.g. change default 10% cutoff percentage distinct values total number samples), can use caret::preProcess() function running preprocess_data remove_var=NULL (see caret::nearZeroVar() function information).","code":"# raw dataset with non-variable features nonvar_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"no\", \"yes\", \"no\"),   var2 = c(0, 1, 1),   var3 = c(\"no\", \"no\", \"no\"),   var4 = c(0, 0, 0),   var5 = c(12, 12, 12) ) nonvar_df #>   outcome var1 var2 var3 var4 var5 #> 1  normal   no    0   no    0   12 #> 2  normal  yes    1   no    0   12 #> 3  cancer   no    1   no    0   12 # remove features with near-zero variance preprocess_data(dataset = nonvar_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_yes var2_1 #>   <chr>      <dbl>  <dbl> #> 1 normal         0      0 #> 2 normal         1      1 #> 3 cancer         0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var4\" \"var3\" \"var5\" # remove features with zero variance preprocess_data(dataset = nonvar_df, outcome_colname = \"outcome\", remove_var = \"zv\") #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_yes var2_1 #>   <chr>      <dbl>  <dbl> #> 1 normal         0      0 #> 2 normal         1      1 #> 3 cancer         0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var4\" \"var3\" \"var5\" # don't remove features with near-zero or zero variance preprocess_data(dataset = nonvar_df, outcome_colname = \"outcome\", remove_var = NULL, collapse_corr_feats = FALSE) #> Using 'outcome' as the outcome column. #> $dat_transformed #> # A tibble: 3 × 5 #>   outcome var1_yes var2_1  var3  var5 #>   <chr>      <dbl>  <dbl> <dbl> <dbl> #> 1 normal         0      0     0    12 #> 2 normal         1      1     0    12 #> 3 cancer         0      1     0    12 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var4\""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"missing-data","dir":"Articles","previous_headings":"Examples","what":"Missing data","title":"Preprocessing data","text":"preprocess_data() also deals missing data. : Removes missing outcome variables. Maintains zero variability feature already variability (.e. feature removed removing features near-zero variance). Replaces missing binary categorical variables zero (splitting multiple columns). Replaces missing continuous data median value feature. ’d like deal missing data different way, please prior inputting data preprocess_data().","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"remove-missing-outcome-variables","dir":"Articles","previous_headings":"Examples > Missing data","what":"Remove missing outcome variables","title":"Preprocessing data","text":"","code":"# raw dataset with missing outcome value miss_oc_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\", NA),   var1 = c(\"no\", \"yes\", \"no\", \"no\"),   var2 = c(0, 1, 1, 1) ) miss_oc_df #>   outcome var1 var2 #> 1  normal   no    0 #> 2  normal  yes    1 #> 3  cancer   no    1 #> 4    <NA>   no    1 # preprocess raw dataset with missing outcome value preprocess_data(dataset = miss_oc_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> Removed 1/4 (25%) of samples because of missing outcome value (NA). #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_yes var2_1 #>   <chr>      <dbl>  <dbl> #> 1 normal         0      0 #> 2 normal         1      1 #> 3 cancer         0      1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"maintain-zero-variability-in-a-feature-if-it-already-has-no-variability","dir":"Articles","previous_headings":"Examples > Missing data","what":"Maintain zero variability in a feature if it already has no variability","title":"Preprocessing data","text":", non-variable feature missing data removed removed features near-zero variance. maintained feature, ’d ones:","code":"# raw dataset with missing value in non-variable feature miss_nonvar_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"no\", \"yes\", \"no\"),   var2 = c(NA, 1, 1) ) miss_nonvar_df #>   outcome var1 var2 #> 1  normal   no   NA #> 2  normal  yes    1 #> 3  cancer   no    1 # preprocess raw dataset with missing value in non-variable feature preprocess_data(dataset = miss_nonvar_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> There are 1 missing value(s) in features with no variation. Missing values were replaced with the non-varying value. #> $dat_transformed #> # A tibble: 3 × 2 #>   outcome var1_yes #>   <chr>      <dbl> #> 1 normal         0 #> 2 normal         1 #> 3 cancer         0 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var2\" # preprocess raw dataset with missing value in non-variable feature preprocess_data(dataset = miss_nonvar_df, outcome_colname = \"outcome\", remove_var = NULL, collapse_corr_feats = FALSE) #> Using 'outcome' as the outcome column. #> There are 1 missing value(s) in features with no variation. Missing values were replaced with the non-varying value. #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_yes  var2 #>   <chr>      <dbl> <dbl> #> 1 normal         0     1 #> 2 normal         1     1 #> 3 cancer         0     1 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"replace-missing-binary-and-categorical-variables-with-zero","dir":"Articles","previous_headings":"Examples > Missing data","what":"Replace missing binary and categorical variables with zero","title":"Preprocessing data","text":"binary variable split two, missing value considered zero .","code":"# raw dataset with missing value in categorical feature miss_cat_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = c(\"no\", \"yes\", NA),   var2 = c(NA, 1, 0) ) miss_cat_df #>   outcome var1 var2 #> 1  normal   no   NA #> 2  normal  yes    1 #> 3  cancer <NA>    0 # preprocess raw dataset with missing value in non-variable feature preprocess_data(dataset = miss_cat_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> 2 categorical missing value(s) (NA) were replaced with 0. Note that the matrix is not full rank so missing values may be duplicated in separate columns. #> $dat_transformed #> # A tibble: 3 × 3 #>   outcome var1_no var1_yes #>   <chr>     <dbl>    <dbl> #> 1 normal        1        0 #> 2 normal        0        1 #> 3 cancer        0        0 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> [1] \"var2\""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"replace-missing-continuous-data-with-the-median-value-of-that-feature","dir":"Articles","previous_headings":"Examples > Missing data","what":"Replace missing continuous data with the median value of that feature","title":"Preprocessing data","text":"’re normalizing continuous features ’s easier see ’s going (.e. median value used):","code":"# raw dataset with missing value in continuous feature miss_cont_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\", \"normal\"),   var1 = c(1, 2, 2, NA),   var2 = c(1, 2, 3, NA) ) miss_cont_df #>   outcome var1 var2 #> 1  normal    1    1 #> 2  normal    2    2 #> 3  cancer    2    3 #> 4  normal   NA   NA # preprocess raw dataset with missing value in continuous feature preprocess_data(dataset = miss_cont_df, outcome_colname = \"outcome\", method = NULL) #> Using 'outcome' as the outcome column. #> 2 missing continuous value(s) were imputed using the median value of the feature. #> $dat_transformed #> # A tibble: 4 × 3 #>   outcome  var1  var2 #>   <chr>   <dbl> <dbl> #> 1 normal      1     1 #> 2 normal      2     2 #> 3 cancer      2     3 #> 4 normal      2     2 #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0)"},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"Examples","what":"Putting it all together","title":"Preprocessing data","text":"’s complicated example raw data puts everything discussed together: Let’s throw preprocessing function default values: can see, got several messages: One samples (row 4) removed outcome value missing. One variables feature variation missing value replaced non-varying value (var11). Four categorical missing values replaced zero (var9). 4 missing rather just 1 (like raw data) split categorical variable 4 different columns first. One missing continuous value imputed using median value feature (var8). Additionally, can see continuous variables normalized, categorical variables changed binary, several features grouped together. variables group can found grp_feats.","code":"test_df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\", NA),   var1 = 1:4,   var2 = c(\"a\", \"b\", \"c\", \"d\"),   var3 = c(\"no\", \"yes\", \"no\", \"no\"),   var4 = c(0, 1, 0, 0),   var5 = c(0, 0, 0, 0),   var6 = c(\"no\", \"no\", \"no\", \"no\"),   var7 = c(1, 1, 0, 0),   var8 = c(5, 6, NA, 7),   var9 = c(NA, \"x\", \"y\", \"z\"),   var10 = c(1, 0, NA, NA),   var11 = c(1, 1, NA, NA),   var12 = c(\"1\", \"2\", \"3\", \"4\") ) test_df #>   outcome var1 var2 var3 var4 var5 var6 var7 var8 var9 var10 var11 var12 #> 1  normal    1    a   no    0    0   no    1    5 <NA>     1     1     1 #> 2  normal    2    b  yes    1    0   no    1    6    x     0     1     2 #> 3  cancer    3    c   no    0    0   no    0   NA    y    NA    NA     3 #> 4    <NA>    4    d   no    0    0   no    0    7    z    NA    NA     4 preprocess_data(dataset = test_df, outcome_colname = \"outcome\") #> Using 'outcome' as the outcome column. #> Removed 1/4 (25%) of samples because of missing outcome value (NA). #> There are 1 missing value(s) in features with no variation. Missing values were replaced with the non-varying value. #> 2 categorical missing value(s) (NA) were replaced with 0. Note that the matrix is not full rank so missing values may be duplicated in separate columns. #> 1 missing continuous value(s) were imputed using the median value of the feature. #> $dat_transformed #> # A tibble: 3 × 6 #>   outcome  grp1 var2_a  grp2  grp3   var8 #>   <chr>   <dbl>  <dbl> <dbl> <dbl>  <dbl> #> 1 normal     -1      1     0     0 -0.707 #> 2 normal      0      0     1     0  0.707 #> 3 cancer      1      0     0     1  0     #>  #> $grp_feats #> $grp_feats$grp1 #> [1] \"var1\"  \"var12\" #>  #> $grp_feats$var2_a #> [1] \"var2_a\" #>  #> $grp_feats$grp2 #> [1] \"var2_b\"   \"var3_yes\" \"var9_x\"   #>  #> $grp_feats$grp3 #> [1] \"var2_c\" \"var7_1\" \"var9_y\" #>  #> $grp_feats$var8 #> [1] \"var8\" #>  #>  #> $removed_feats #> [1] \"var4\"  \"var5\"  \"var10\" \"var6\"  \"var11\""},{"path":"http://www.schlosslab.org/mikropml/articles/preprocess.html","id":"next-step-train-and-evaluate-your-model","dir":"Articles","previous_headings":"Examples","what":"Next step: train and evaluate your model!","title":"Preprocessing data","text":"preprocess data (either using preprocess_data() preprocessing data ), ’re ready train evaluate machine learning models! Please see run_ml() information training models.","code":""},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"the-simplest-way-to-run_ml","dir":"Articles","previous_headings":"","what":"The simplest way to run_ml()","title":"Hyperparameter tuning","text":"mentioned , minimal input dataset (dataset) machine learning model want use (method). run_ml(), default 100 times repeated, 5-fold cross-validation, evaluate hyperparameters 500 total iterations. Say want run L2 regularized logistic regression. : ’ll probably get warning run dataset small. want learn , check introductory vignette training evaluating ML model: vignette(\"introduction\"). default, run_ml() selects hyperparameters depending dataset method used. can see, alpha hyperparameter set 0, specifies L2 regularization. glmnet gives us option run L1 L2 regularization. change alpha 1, run L1-regularized logistic regression. can also tune alpha specifying variety values 0 1. use value 0 1, running elastic net. default hyperparameter lambda adjusts L2 regularization penalty range values 10^-4 10. look 100 repeated cross-validation performance metrics AUC, Accuracy, prAUC tested lambda value, see appropriate dataset better others.","code":"results <- run_ml(dat,   \"glmnet\",   outcome_colname = \"dx\",   cv_times = 100,   seed = 2019 ) #> Using 'dx' as the outcome column. #> Training the model... #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:future': #>  #>     cluster #> The following object is masked from 'package:mikropml': #>  #>     compare_models #> Training complete. results$trained_model #> glmnet  #>  #> 161 samples #>  10 predictor #>   2 classes: 'cancer', 'normal'  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 100 times)  #> Summary of sample sizes: 128, 129, 129, 129, 129, 130, ...  #> Resampling results across tuning parameters: #>  #>   lambda  logLoss    AUC        prAUC      Accuracy   Kappa       F1        #>   1e-04   0.7113272  0.6123301  0.5725828  0.5853927  0.17080523  0.5730989 #>   1e-03   0.7113272  0.6123301  0.5725828  0.5853927  0.17080523  0.5730989 #>   1e-02   0.7112738  0.6123883  0.5726478  0.5854514  0.17092470  0.5731635 #>   1e-01   0.6819806  0.6210744  0.5793961  0.5918756  0.18369829  0.5779616 #>   1e+00   0.6803749  0.6278273  0.5827655  0.5896356  0.17756961  0.5408139 #>   1e+01   0.6909820  0.6271894  0.5814202  0.5218000  0.02920942  0.1875293 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.5789667    0.5920074    0.5796685       0.5977166       0.5796685 #>   0.5789667    0.5920074    0.5796685       0.5977166       0.5796685 #>   0.5789667    0.5921250    0.5797769       0.5977182       0.5797769 #>   0.5805917    0.6032353    0.5880165       0.6026963       0.5880165 #>   0.5057833    0.6715588    0.6005149       0.5887829       0.6005149 #>   0.0607250    0.9678676    0.7265246       0.5171323       0.7265246 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.5789667  0.2839655       0.5854870         #>   0.5789667  0.2839655       0.5854870         #>   0.5789667  0.2839636       0.5855458         #>   0.5805917  0.2847195       0.5919135         #>   0.5057833  0.2478291       0.5886711         #>   0.0607250  0.0292613       0.5142963         #>  #> Tuning parameter 'alpha' was held constant at a value of 0 #> AUC was used to select the optimal model using the largest value. #> The final values used for the model were alpha = 0 and lambda = 1. results$trained_model$results #>   alpha lambda   logLoss       AUC     prAUC  Accuracy      Kappa        F1 #> 1     0  1e-04 0.7113272 0.6123301 0.5725828 0.5853927 0.17080523 0.5730989 #> 2     0  1e-03 0.7113272 0.6123301 0.5725828 0.5853927 0.17080523 0.5730989 #> 3     0  1e-02 0.7112738 0.6123883 0.5726478 0.5854514 0.17092470 0.5731635 #> 4     0  1e-01 0.6819806 0.6210744 0.5793961 0.5918756 0.18369829 0.5779616 #> 5     0  1e+00 0.6803749 0.6278273 0.5827655 0.5896356 0.17756961 0.5408139 #> 6     0  1e+01 0.6909820 0.6271894 0.5814202 0.5218000 0.02920942 0.1875293 #>   Sensitivity Specificity Pos_Pred_Value Neg_Pred_Value Precision    Recall #> 1   0.5789667   0.5920074      0.5796685      0.5977166 0.5796685 0.5789667 #> 2   0.5789667   0.5920074      0.5796685      0.5977166 0.5796685 0.5789667 #> 3   0.5789667   0.5921250      0.5797769      0.5977182 0.5797769 0.5789667 #> 4   0.5805917   0.6032353      0.5880165      0.6026963 0.5880165 0.5805917 #> 5   0.5057833   0.6715588      0.6005149      0.5887829 0.6005149 0.5057833 #> 6   0.0607250   0.9678676      0.7265246      0.5171323 0.7265246 0.0607250 #>   Detection_Rate Balanced_Accuracy   logLossSD      AUCSD    prAUCSD AccuracySD #> 1      0.2839655         0.5854870 0.085315967 0.09115229 0.07296554 0.07628572 #> 2      0.2839655         0.5854870 0.085315967 0.09115229 0.07296554 0.07628572 #> 3      0.2839636         0.5855458 0.085276565 0.09122242 0.07301412 0.07637123 #> 4      0.2847195         0.5919135 0.048120032 0.09025695 0.07329214 0.07747312 #> 5      0.2478291         0.5886711 0.012189172 0.09111917 0.07505095 0.07771171 #> 6      0.0292613         0.5142963 0.001610008 0.09266875 0.07640896 0.03421597 #>      KappaSD       F1SD SensitivitySD SpecificitySD Pos_Pred_ValueSD #> 1 0.15265728 0.09353786    0.13091452    0.11988406       0.08316345 #> 2 0.15265728 0.09353786    0.13091452    0.11988406       0.08316345 #> 3 0.15281903 0.09350099    0.13073501    0.12002481       0.08329024 #> 4 0.15485134 0.09308733    0.12870031    0.12037225       0.08554483 #> 5 0.15563046 0.10525917    0.13381009    0.11639614       0.09957685 #> 6 0.06527242 0.09664720    0.08010494    0.06371495       0.31899811 #>   Neg_Pred_ValueSD PrecisionSD   RecallSD Detection_RateSD Balanced_AccuracySD #> 1       0.08384956  0.08316345 0.13091452       0.06394409          0.07640308 #> 2       0.08384956  0.08316345 0.13091452       0.06394409          0.07640308 #> 3       0.08385838  0.08329024 0.13073501       0.06384692          0.07648207 #> 4       0.08427362  0.08554483 0.12870031       0.06272897          0.07748791 #> 5       0.07597766  0.09957685 0.13381009       0.06453637          0.07773039 #> 6       0.02292294  0.31899811 0.08010494       0.03803159          0.03184136"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"customizing-hyperparameters","dir":"Articles","previous_headings":"","what":"Customizing hyperparameters","title":"Hyperparameter tuning","text":"example, want change lambda values provide better range test cross-validation step. don’t want use defaults provide named list new values. example: Now let’s run L2 logistic regression new lambda values: time, cover larger different range lambda settings cross-validation. know lambda value best one? answer , need run ML pipeline multiple data splits look mean cross-validation performance lambda across modeling experiments. describe run pipeline multiple data splits vignette(\"parallel\"). train model new lambda range defined . run 3 times different seed, result different splits data training testing sets. can use plot_hp_performance see lambda gives us largest mean AUC value across modeling experiments.  can see, get mean maxima 0.03 best lambda value dataset run 3 data splits. fact seeing maxima middle range edges, shows providing large enough range exhaust lambda search build model. recommend user use plot make sure best hyperparameter edges provided list. better understanding global maxima, better run data splits using seeds. picked 3 seeds keep runtime vignette, real-world data recommend using many seeds.","code":"new_hp <- list(   alpha = 1,   lambda = c(0.00001, 0.0001, 0.001, 0.01, 0.015, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.1) ) new_hp #> $alpha #> [1] 1 #>  #> $lambda #>  [1] 0.00001 0.00010 0.00100 0.01000 0.01500 0.02000 0.02500 0.03000 0.04000 #> [10] 0.05000 0.06000 0.10000 results <- run_ml(dat,   \"glmnet\",   outcome_colname = \"dx\",   cv_times = 100,   hyperparameters = new_hp,   seed = 2019 ) #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. results$trained_model #> glmnet  #>  #> 161 samples #>  10 predictor #>   2 classes: 'cancer', 'normal'  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold, repeated 100 times)  #> Summary of sample sizes: 128, 129, 129, 129, 129, 130, ...  #> Resampling results across tuning parameters: #>  #>   lambda   logLoss    AUC        prAUC      Accuracy   Kappa      F1        #>   0.00001  0.7215038  0.6112253  0.5720005  0.5842184  0.1684871  0.5726974 #>   0.00010  0.7215038  0.6112253  0.5720005  0.5842184  0.1684871  0.5726974 #>   0.00100  0.7209099  0.6112771  0.5719601  0.5845329  0.1691285  0.5730414 #>   0.01000  0.6984432  0.6156112  0.5758977  0.5830960  0.1665062  0.5759265 #>   0.01500  0.6913332  0.6169396  0.5770496  0.5839720  0.1683912  0.5786347 #>   0.02000  0.6870103  0.6177313  0.5779563  0.5833645  0.1673234  0.5796891 #>   0.02500  0.6846387  0.6169757  0.5769305  0.5831907  0.1669901  0.5792840 #>   0.03000  0.6834369  0.6154763  0.5754118  0.5821394  0.1649081  0.5786336 #>   0.04000  0.6833322  0.6124776  0.5724802  0.5786224  0.1578750  0.5735757 #>   0.05000  0.6850454  0.6069059  0.5668928  0.5732197  0.1468699  0.5624480 #>   0.06000  0.6880861  0.5974311  0.5596714  0.5620224  0.1240112  0.5375824 #>   0.10000  0.6944846  0.5123565  0.3034983  0.5120114  0.0110144  0.3852423 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.5798500    0.5888162    0.5780748       0.5971698       0.5780748 #>   0.5798500    0.5888162    0.5780748       0.5971698       0.5780748 #>   0.5801167    0.5891912    0.5784544       0.5974307       0.5784544 #>   0.5883667    0.5783456    0.5755460       0.5977390       0.5755460 #>   0.5929750    0.5756471    0.5763123       0.5987220       0.5763123 #>   0.5967167    0.5708824    0.5748385       0.5990649       0.5748385 #>   0.5970250    0.5702721    0.5743474       0.5997928       0.5743474 #>   0.5964500    0.5687721    0.5734044       0.5982451       0.5734044 #>   0.5904500    0.5677353    0.5699817       0.5943308       0.5699817 #>   0.5734833    0.5736176    0.5668523       0.5864448       0.5668523 #>   0.5360333    0.5881250    0.5595918       0.5722851       0.5595918 #>   0.1145917    0.8963456    0.5255752       0.5132665       0.5255752 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.5798500  0.28441068      0.5843331         #>   0.5798500  0.28441068      0.5843331         #>   0.5801167  0.28453770      0.5846539         #>   0.5883667  0.28860521      0.5833561         #>   0.5929750  0.29084305      0.5843110         #>   0.5967167  0.29264681      0.5837995         #>   0.5970250  0.29278708      0.5836485         #>   0.5964500  0.29248583      0.5826110         #>   0.5904500  0.28951992      0.5790926         #>   0.5734833  0.28119862      0.5735505         #>   0.5360333  0.26270204      0.5620792         #>   0.1145917  0.05585777      0.5054686         #>  #> Tuning parameter 'alpha' was held constant at a value of 1 #> AUC was used to select the optimal model using the largest value. #> The final values used for the model were alpha = 1 and lambda = 0.02. results <- lapply(seq(100, 102), function(seed) {   run_ml(dat, \"glmnet\", seed = seed, hyperparameters = new_hp) }) #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. #> Using 'dx' as the outcome column. #> Training the model... #> Training complete. models <- lapply(results, function(x) x$trained_model) hp_metrics <- combine_hp_performance(models) plot_hp_performance(hp_metrics$dat, lambda, AUC)"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"hyperparameter-options","dir":"Articles","previous_headings":"","what":"Hyperparameter options","title":"Hyperparameter tuning","text":"can see default hyperparameters used dataset get_hyperparams_list(). examples built-datasets provide: hyperparameters tuned modeling methods. output similar, won’t go details.","code":"get_hyperparams_list(otu_mini_bin, \"glmnet\") #> $lambda #> [1] 1e-04 1e-03 1e-02 1e-01 1e+00 1e+01 #>  #> $alpha #> [1] 0 get_hyperparams_list(otu_mini_bin, \"rf\") #> $mtry #> [1] 2 3 6 get_hyperparams_list(otu_small, \"rf\") #> $mtry #> [1]  4  8 16"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"regression","dir":"Articles","previous_headings":"Hyperparameter options","what":"Regression","title":"Hyperparameter tuning","text":"mentioned , glmnet uses alpha parameter lambda hyperparameter. alpha 0 L2 regularization (ridge). alpha 1 L1 regularization (lasso). alpha elastic net. can also tune alpha like hyperparameter. Please refer original glmnet documentation information: https://web.stanford.edu/~hastie/glmnet/glmnet_alpha.html default hyperparameters chosen run_ml() fixed glmnet.","code":"#> $lambda #> [1] 1e-04 1e-03 1e-02 1e-01 1e+00 1e+01 #>  #> $alpha #> [1] 0"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"random-forest","dir":"Articles","previous_headings":"Hyperparameter options","what":"Random forest","title":"Hyperparameter tuning","text":"run rf parRF, using randomForest package implementation. tuning mtry hyperparameter. number features randomly collected sampled tree node. number needs less number features dataset. Please refer original documentation information: https://cran.r-project.org/web/packages/randomForest/randomForest.pdf default, take square root number features dataset provide range [sqrt_features / 2, sqrt_features, sqrt_features * 2]. example number features 1000: Similar glmnet method, can provide mtry range.","code":"#> $mtry #> [1] 16 32 64"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"decision-tree","dir":"Articles","previous_headings":"Hyperparameter options","what":"Decision tree","title":"Hyperparameter tuning","text":"run rpart2, running rpart package implementation decision tree. tuning maxdepth hyperparameter. maximum depth node final tree. Please refer original documentation information maxdepth: https://cran.r-project.org/web/packages/rpart/rpart.pdf default, provide range less number features dataset. example 1000 features: 10 features:","code":"#> $maxdepth #> [1]  1  2  4  8 16 30 #> $maxdepth #> [1] 1 2 4 8"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"svm-with-radial-basis-kernel","dir":"Articles","previous_headings":"Hyperparameter options","what":"SVM with radial basis kernel","title":"Hyperparameter tuning","text":"run svmRadial method, tuning C sigma hyperparameters. sigma defines far influence single training example reaches C behaves regularization parameter. Please refer great sklearn resource information hyperparameters: https://scikit-learn.org/stable/auto_examples/svm/plot_rbf_parameters.html default, provide 2 separate range values two hyperparameters.","code":"#> $C #> [1] 1e-03 1e-02 1e-01 1e+00 1e+01 1e+02 #>  #> $sigma #> [1] 1e-06 1e-05 1e-04 1e-03 1e-02 1e-01"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"xgboost","dir":"Articles","previous_headings":"Hyperparameter options","what":"XGBoost","title":"Hyperparameter tuning","text":"run xgbTree method, tuning nrounds, gamma, eta max_depth, colsample_bytree, min_child_weight subsample hyperparameters. can read hyperparameters : https://xgboost.readthedocs.io/en/latest/parameter.html default, set nrounds, gamma, colsample_bytree min_child_weight fixed values provide range values eta, max_depth subsample. can changed optimized user supplying custom named list hyperparameters run_ml().","code":"#> $nrounds #> [1] 100 #>  #> $gamma #> [1] 0 #>  #> $eta #> [1] 0.001 0.010 0.100 1.000 #>  #> $max_depth #> [1]  1  2  4  8 16 30 #>  #> $colsample_bytree #> [1] 0.8 #>  #> $min_child_weight #> [1] 1 #>  #> $subsample #> [1] 0.4 0.5 0.6 0.7"},{"path":"http://www.schlosslab.org/mikropml/articles/tuning.html","id":"other-ml-methods","dir":"Articles","previous_headings":"","what":"Other ML methods","title":"Hyperparameter tuning","text":"ML methods tested set default hyperparameters , theory may able use methods supported caret run_ml(). Take look available models caret (see list tag). need give run_ml() custom hyperparameters just like examples :","code":"run_ml(otu_mini_bin,   \"regLogistic\",   hyperparameters = list(     cost = 10^seq(-4, 1, 1),     epsilon = c(0.01),     loss = c(\"L2_primal\")   ) )"},{"path":"http://www.schlosslab.org/mikropml/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Begüm Topçuoğlu. Author. Zena Lapp. Author. Kelly Sovacool. Author, maintainer. Evan Snitkin. Author. Jenna Wiens. Author. Patrick Schloss. Author. Nick Lesniak. Contributor. Courtney Armour. Contributor. Sarah Lucas. Contributor.","code":""},{"path":"http://www.schlosslab.org/mikropml/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Topçuoğlu BD, Lapp Z, Sovacool KL, Snitkin E, Wiens J, Schloss PD (2021). “mikropml: User-Friendly R Package Supervised Machine Learning Pipelines.” Journal Open Source Software, 6(61), 3073. doi:10.21105/joss.03073, https://joss.theoj.org/papers/10.21105/joss.03073.","code":"@Article{,   title = {{mikropml}: User-Friendly R Package for Supervised Machine Learning Pipelines},   author = {Begüm D. Topçuoğlu and Zena Lapp and Kelly L. Sovacool and Evan Snitkin and Jenna Wiens and Patrick D. Schloss},   journal = {Journal of Open Source Software},   year = {2021},   volume = {6},   number = {61},   pages = {3073},   doi = {10.21105/joss.03073},   url = {https://joss.theoj.org/papers/10.21105/joss.03073}, }"},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"mikropml-","dir":"","previous_headings":"","what":"User-Friendly R Package for Supervised Machine Learning Pipelines","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"meek-ROPE em el User-Friendly R Package Supervised Machine Learning Pipelines interface build machine learning models classification regression problems. mikropml implements ML pipeline described Topçuoğlu et al. (2020) reasonable default options data preprocessing, hyperparameter tuning, cross-validation, testing, model evaluation, interpretation steps. See website information, documentation, examples.","code":""},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"can install latest release CRAN: development version GitHub: install terminal using conda mamba:","code":"install.packages('mikropml') # install.packages(\"devtools\") devtools::install_github(\"SchlossLab/mikropml\") mamba install -c conda-forge r-mikropml"},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"Imports: caret, dplyr, e1071, glmnet, kernlab, MLmetrics, randomForest, rlang, rpart, stats, utils, xgboost Suggests: assertthat, doFuture, forcats, foreach, future, future.apply, furrr, ggplot2, knitr, progress, progressr, purrr, rmarkdown, rsample, testthat, tidyr","code":""},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"Check introductory vignette quick start tutorial. -depth discussion, read vignettes /take look reference documentation. can watch Riffomonas Project series video tutorials covering mikropml skills related machine learning. also provide Snakemake workflow running mikropml locally HPC. highly recommend running mikropml Snakemake another workflow management system reproducibility scalability ML analyses.","code":""},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"help--contributing","dir":"","previous_headings":"","what":"Help & Contributing","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"come across bug, open issue include minimal reproducible example. questions, create new post Discussions. ’d like contribute, see guidelines .","code":""},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"Please note mikropml project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"mikropml package licensed MIT license. Text images included repository, including mikropml logo, licensed CC 4.0 license.","code":""},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"cite mikropml publications, use: Topçuoğlu BD, Lapp Z, Sovacool KL, Snitkin E, Wiens J, Schloss PD (2021). “mikropml: User-Friendly R Package Supervised Machine Learning Pipelines.” Journal Open Source Software, 6(61), 3073. doi:10.21105/joss.03073, https://joss.theoj.org/papers/10.21105/joss.03073. BibTeX entry LaTeX users :","code":"@Article{,   title = {{mikropml}: User-Friendly R Package for Supervised Machine Learning Pipelines},   author = {Begüm D. Topçuoğlu and Zena Lapp and Kelly L. Sovacool and Evan Snitkin and Jenna Wiens and Patrick D. Schloss},   journal = {Journal of Open Source Software},   year = {2021},   volume = {6},   number = {61},   pages = {3073},   doi = {10.21105/joss.03073},   url = {https://joss.theoj.org/papers/10.21105/joss.03073}, }"},{"path":"http://www.schlosslab.org/mikropml/index.html","id":"why-the-name","dir":"","previous_headings":"","what":"Why the name?","title":"User-Friendly R Package for Supervised Machine Learning Pipelines","text":"word “mikrop” (pronounced “meek-ROPE”) Turkish “microbe”. package originally implemented machine learning pipeline microbiome-based classification problems (see Topçuoğlu et al. 2020). realized methods applicable many fields , stuck name like !","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/abort_packages_not_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw error if required packages are not installed. — abort_packages_not_installed","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"Reports packages need installed parent function name. See https://stackoverflow.com/questions/15595478/--get--name---calling-function-inside--called-routine intended used inside function. error otherwise.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/abort_packages_not_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"","code":"abort_packages_not_installed(...)"},{"path":"http://www.schlosslab.org/mikropml/reference/abort_packages_not_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"... names packages check","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/abort_packages_not_installed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/abort_packages_not_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"","code":"if (FALSE) { # \\dontrun{ abort_packages_not_installed(\"base\") abort_packages_not_installed(\"not-a-package-name\", \"caret\", \"dplyr\", \"non_package\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/bootstrap_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","title":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","text":"Uses rsample::bootstraps(), rsample::int_pctl(), furrr::future_map()","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bootstrap_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","text":"","code":"bootstrap_performance(   ml_result,   outcome_colname,   bootstrap_times = 10000,   alpha = 0.05 )"},{"path":"http://www.schlosslab.org/mikropml/reference/bootstrap_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","text":"ml_result result returned single run_ml() call outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). bootstrap_times number boostraps create (default: 10000) alpha alpha level confidence interval (default 0.05 create 95% confidence interval)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bootstrap_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","text":"data frame estimate (.estimate), lower bound (.lower), upper bound (.upper) performance metric (term).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bootstrap_performance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bootstrap_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a bootstrap confidence interval for the performance on a single train/test split — bootstrap_performance","text":"","code":"bootstrap_performance(otu_mini_bin_results_glmnet, \"dx\",   bootstrap_times = 10, alpha = 0.10 ) #> Warning: Recommend at least 1000 non-missing bootstrap resamples for terms `AUC`, #> `Accuracy`, `Balanced_Accuracy`, `Detection_Rate`, `F1`, `Kappa`, #> `Neg_Pred_Value`, `Pos_Pred_Value`, `Precision`, `Recall`, `Sensitivity`, #> `Specificity`, `cv_metric_AUC`, `logLoss`, and `prAUC`. #> # A tibble: 15 × 6 #>    term              .lower .estimate .upper .alpha .method    #>    <chr>              <dbl>     <dbl>  <dbl>  <dbl> <chr>      #>  1 AUC                0.437     0.612  0.761    0.1 percentile #>  2 Accuracy           0.394     0.567  0.721    0.1 percentile #>  3 Balanced_Accuracy  0.384     0.563  0.719    0.1 percentile #>  4 Detection_Rate     0.179     0.277  0.373    0.1 percentile #>  5 F1                 0.416     0.558  0.706    0.1 percentile #>  6 Kappa             -0.226     0.126  0.438    0.1 percentile #>  7 Neg_Pred_Value     0.325     0.559  0.741    0.1 percentile #>  8 Pos_Pred_Value     0.382     0.569  0.719    0.1 percentile #>  9 Precision          0.382     0.569  0.719    0.1 percentile #> 10 Recall             0.419     0.553  0.709    0.1 percentile #> 11 Sensitivity        0.419     0.553  0.709    0.1 percentile #> 12 Specificity        0.349     0.574  0.737    0.1 percentile #> 13 cv_metric_AUC      0.622     0.622  0.622    0.1 percentile #> 14 logLoss            0.672     0.687  0.705    0.1 percentile #> 15 prAUC              0.444     0.574  0.690    0.1 percentile if (FALSE) { # \\dontrun{ outcome_colname <- \"dx\" run_ml(otu_mini_bin, \"rf\", outcome_colname = \"dx\") %>%   bootstrap_performance(outcome_colname,     bootstrap_times = 10000,     alpha = 0.05   ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","title":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","text":"Get lower upper bounds empirical confidence interval","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","text":"","code":"lower_bound(x, alpha)  upper_bound(x, alpha)"},{"path":"http://www.schlosslab.org/mikropml/reference/bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","text":"x vector test statistics, permutation tests bootstraps alpha alpha level confidence interval (default: 0.05 obtain 95% confidence interval)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","text":"value lower upper bound confidence interval","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bounds.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","text":"lower_bound(): Get lower bound empirical confidence interval upper_bound(): Get upper bound empirical confidence interval","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the lower and upper bounds for an empirical confidence interval — lower_bound","text":"","code":"if (FALSE) { # \\dontrun{ x <- 1:10000 lower_bound(x, 0.05) upper_bound(x, 0.05) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_balanced_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","title":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","text":"Implements Equation 1 Wu et al. 2021 doi:10.1016/j.ajhg.2021.08.012 . Equation 7 AUPRC (aka prAUC) used place precision.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_balanced_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","text":"","code":"calc_balanced_precision(precision, prior)"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_balanced_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","text":"precision actual precision model. prior baseline precision, aka frequency positives. Can calculated calc_baseline_precision","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_balanced_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","text":"expected precision data balanced","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_balanced_precision.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","text":"Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_balanced_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate balanced precision given actual and baseline precision — calc_balanced_precision","text":"","code":"prior <- calc_baseline_precision(otu_mini_bin,   outcome_colname = \"dx\",   pos_outcome = \"cancer\" ) #> Using 'dx' as the outcome column. calc_balanced_precision(otu_mini_bin_results_rf$performance$Precision, prior) #> [1] 0.5978898  otu_mini_bin_results_rf$performance %>%   dplyr::mutate(     balanced_precision = calc_balanced_precision(Precision, prior),     aubprc = calc_balanced_precision(prAUC, prior)   ) %>%   dplyr::select(AUC, Precision, balanced_precision, aubprc) #> # A tibble: 1 × 4 #>     AUC Precision balanced_precision aubprc #>   <dbl>     <dbl>              <dbl>  <dbl> #> 1 0.546     0.588              0.598  0.517  # cumulative performance for a single model sensspec_1 <- calc_model_sensspec(   otu_mini_bin_results_glmnet$trained_model,   otu_mini_bin_results_glmnet$test_data,   \"dx\" ) #> Using 'dx' as the outcome column. head(sensspec_1) #>      cancer    normal actual tp fp sensitivity  fpr specificity precision #> 1 0.5628845 0.4371155 cancer  1  0  0.05263158 0.00        1.00 1.0000000 #> 2 0.5492706 0.4507294 cancer  2  0  0.10526316 0.00        1.00 1.0000000 #> 3 0.5456710 0.4543290 cancer  3  0  0.15789474 0.00        1.00 1.0000000 #> 4 0.5440588 0.4559412 cancer  4  0  0.21052632 0.00        1.00 1.0000000 #> 5 0.5414783 0.4585217 normal  4  1  0.21052632 0.05        0.95 0.8000000 #> 6 0.5395434 0.4604566 normal  4  2  0.21052632 0.10        0.90 0.6666667 prior <- calc_baseline_precision(otu_mini_bin,   outcome_colname = \"dx\",   pos_outcome = \"cancer\" ) #> Using 'dx' as the outcome column. sensspec_1 %>%   dplyr::mutate(balanced_precision = calc_balanced_precision(precision, prior)) %>%   dplyr::rename(recall = sensitivity) %>%   calc_mean_perf(group_var = recall, sum_var = balanced_precision) %>%   plot_mean_prc(ycol = mean_balanced_precision)"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_baseline_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","title":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","text":"Calculate fraction positives, .e. baseline precision PRC curve","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_baseline_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","text":"","code":"calc_baseline_precision(dataset, outcome_colname = NULL, pos_outcome = NULL)"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_baseline_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). pos_outcome positive outcome outcome_colname, e.g. \"cancer\" otu_mini_bin dataset.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_baseline_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","text":"baseline precision based fraction positives","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_baseline_precision.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_baseline_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the fraction of positives, i.e. baseline precision for a PRC curve — calc_baseline_precision","text":"","code":"# calculate the baseline precision data.frame(y = c(\"a\", \"b\", \"a\", \"b\")) %>%   calc_baseline_precision(     outcome_colname = \"y\",     pos_outcome = \"a\"   ) #> Using 'y' as the outcome column. #> [1] 0.5   calc_baseline_precision(otu_mini_bin,   outcome_colname = \"dx\",   pos_outcome = \"cancer\" ) #> Using 'dx' as the outcome column. #> [1] 0.49   # if you're not sure which outcome was used as the 'positive' outcome during # model training, you can access it from the trained model and pass it along: calc_baseline_precision(otu_mini_bin,   outcome_colname = \"dx\",   pos_outcome = otu_mini_bin_results_glmnet$trained_model$levels[1] ) #> Using 'dx' as the outcome column. #> [1] 0.49"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_mean_perf.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to calculate mean performance curves for multiple models — calc_mean_perf","title":"Generic function to calculate mean performance curves for multiple models — calc_mean_perf","text":"Used calc_mean_roc() calc_mean_prc().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_mean_perf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to calculate mean performance curves for multiple models — calc_mean_perf","text":"","code":"calc_mean_perf(sensspec_dat, group_var = specificity, sum_var = sensitivity)"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_mean_perf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to calculate mean performance curves for multiple models — calc_mean_perf","text":"sensspec_dat data frame created concatenating results calc_model_sensspec() multiple models. group_var variable group (e.g. specificity recall). sum_var variable summarize (e.g. sensitivity precision).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_mean_perf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to calculate mean performance curves for multiple models — calc_mean_perf","text":"data frame mean & standard deviation sum_var summarized group_var","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_mean_perf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic function to calculate mean performance curves for multiple models — calc_mean_perf","text":"Courtney Armour Kelly Sovacool","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_bootstrap_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate performance for a single split from rsample::bootstraps() — calc_perf_bootstrap_split","title":"Calculate performance for a single split from rsample::bootstraps() — calc_perf_bootstrap_split","text":"Used bootstrap_performance().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_bootstrap_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate performance for a single split from rsample::bootstraps() — calc_perf_bootstrap_split","text":"","code":"calc_perf_bootstrap_split(   test_data_split,   trained_model,   outcome_colname,   perf_metric_function,   perf_metric_name,   class_probs,   method,   seed )"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_bootstrap_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate performance for a single split from rsample::bootstraps() — calc_perf_bootstrap_split","text":"test_data_split single bootstrap test set rsample::bootstraps() trained_model Trained model caret::train(). outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". class_probs Whether use class probabilities (TRUE categorical outcomes, FALSE numeric outcomes). method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost seed Random seed (default: NA). results reproducible set seed.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_bootstrap_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate performance for a single split from rsample::bootstraps() — calc_perf_bootstrap_split","text":"long data frame performance metrics rsample::int_pctl()","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_bootstrap_split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate performance for a single split from rsample::bootstraps() — calc_perf_bootstrap_split","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get performance metrics for test data — calc_perf_metrics","title":"Get performance metrics for test data — calc_perf_metrics","text":"Get performance metrics test data","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get performance metrics for test data — calc_perf_metrics","text":"","code":"calc_perf_metrics(   test_data,   trained_model,   outcome_colname,   perf_metric_function,   class_probs )"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get performance metrics for test data — calc_perf_metrics","text":"test_data Held test data: dataframe outcome features. trained_model Trained model caret::train(). outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. class_probs Whether use class probabilities (TRUE categorical outcomes, FALSE numeric outcomes).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get performance metrics for test data — calc_perf_metrics","text":"Dataframe performance metrics.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_metrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get performance metrics for test data — calc_perf_metrics","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_perf_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get performance metrics for test data — calc_perf_metrics","text":"","code":"if (FALSE) { # \\dontrun{ results <- run_ml(otu_small, \"glmnet\", kfold = 2, cv_times = 2) calc_perf_metrics(results$test_data,   results$trained_model,   \"dx\",   multiClassSummary,   class_probs = TRUE ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_pvalue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the p-value for a permutation test — calc_pvalue","title":"Calculate the p-value for a permutation test — calc_pvalue","text":"compute Monte Carlo p-value correction based formula Page 158 'Bootstrap methods application' Davison & Hinkley 1997","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_pvalue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the p-value for a permutation test — calc_pvalue","text":"","code":"calc_pvalue(vctr, test_stat)"},{"path":"http://www.schlosslab.org/mikropml/reference/calc_pvalue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the p-value for a permutation test — calc_pvalue","text":"vctr vector statistics test_stat test statistic","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_pvalue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the p-value for a permutation test — calc_pvalue","text":"number observations vctr greater test_stat divided number observations vctr","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/calc_pvalue.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the p-value for a permutation test — calc_pvalue","text":"Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/change_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Change columns to numeric if possible — change_to_num","title":"Change columns to numeric if possible — change_to_num","text":"Change columns numeric possible","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/change_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change columns to numeric if possible — change_to_num","text":"","code":"change_to_num(features)"},{"path":"http://www.schlosslab.org/mikropml/reference/change_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change columns to numeric if possible — change_to_num","text":"features dataframe features machine learning","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/change_to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change columns to numeric if possible — change_to_num","text":"dataframe numeric columns possible","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/change_to_num.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change columns to numeric if possible — change_to_num","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/change_to_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change columns to numeric if possible — change_to_num","text":"","code":"if (FALSE) { # \\dontrun{ class(change_to_num(data.frame(val = c(\"1\", \"2\", \"3\")))[[1]]) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Check all params that don't return a value — check_all","title":"Check all params that don't return a value — check_all","text":"Check params return value","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check all params that don't return a value — check_all","text":"","code":"check_all(   dataset,   method,   permute,   kfold,   training_frac,   perf_metric_function,   perf_metric_name,   groups,   group_partitions,   corr_thresh,   seed,   hyperparameters )"},{"path":"http://www.schlosslab.org/mikropml/reference/check_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check all params that don't return a value — check_all","text":"dataset Data frame outcome variable columns features. method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost kfold Fold number k-fold cross-validation (default: 5). training_frac Fraction data training set (default: 0.8). Rows dataset randomly selected training set, remaining rows used testing set. Alternatively, provide vector integers, used row indices training set. remaining rows used testing set. perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation. corr_thresh feature importance, group correlations equal corr_thresh (range 0 1; default: 1). seed Random seed (default: NA). results reproducible set seed. hyperparameters Dataframe hyperparameters (default NULL; sensible defaults chosen automatically).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_all.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check all params that don't return a value — check_all","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_cat_feats.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if any features are categorical — check_cat_feats","title":"Check if any features are categorical — check_cat_feats","text":"Check features categorical","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_cat_feats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if any features are categorical — check_cat_feats","text":"","code":"check_cat_feats(feats)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_cat_feats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if any features are categorical — check_cat_feats","text":"feats features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_cat_feats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if any features are categorical — check_cat_feats","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_cat_feats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if any features are categorical — check_cat_feats","text":"","code":"if (FALSE) { # \\dontrun{ check_cat_feats(otu_mini_bin) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_corr_thresh.html","id":null,"dir":"Reference","previous_headings":"","what":"check that corr_thresh is either NULL or a number between 0 and 1 — check_corr_thresh","title":"check that corr_thresh is either NULL or a number between 0 and 1 — check_corr_thresh","text":"check corr_thresh either NULL number 0 1","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_corr_thresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that corr_thresh is either NULL or a number between 0 and 1 — check_corr_thresh","text":"","code":"check_corr_thresh(corr_thresh)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_corr_thresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that corr_thresh is either NULL or a number between 0 and 1 — check_corr_thresh","text":"corr_thresh correlation threshold","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_corr_thresh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"check that corr_thresh is either NULL or a number between 0 and 1 — check_corr_thresh","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_corr_thresh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check that corr_thresh is either NULL or a number between 0 and 1 — check_corr_thresh","text":"","code":"if (FALSE) { # \\dontrun{ check_corr_thresh(1) check_corr_thresh(0.8) check_corr_thresh(2019) check_corr_thresh(NULL) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the dataset is not empty and has more than 1 column. — check_dataset","title":"Check that the dataset is not empty and has more than 1 column. — check_dataset","text":"Errors rows fewer 2 columns.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the dataset is not empty and has more than 1 column. — check_dataset","text":"","code":"check_dataset(dataset)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the dataset is not empty and has more than 1 column. — check_dataset","text":"dataset Data frame outcome variable columns features.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_dataset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that the dataset is not empty and has more than 1 column. — check_dataset","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the dataset is not empty and has more than 1 column. — check_dataset","text":"","code":"if (FALSE) { # \\dontrun{ check_dataset(otu_small) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Check features — check_features","title":"Check features — check_features","text":"Check features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check features — check_features","text":"","code":"check_features(features, check_missing = TRUE)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check features — check_features","text":"features features machine learning check_missing check whether features missing data (default: TRUE)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_features.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check features — check_features","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check features — check_features","text":"","code":"if (FALSE) { # \\dontrun{ check_features(otu_mini_bin[, 2:11]) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_group_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of the group_partitions list — check_group_partitions","title":"Check the validity of the group_partitions list — check_group_partitions","text":"Check validity group_partitions list","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_group_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of the group_partitions list — check_group_partitions","text":"","code":"check_group_partitions(dataset, groups, group_partitions)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_group_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of the group_partitions list — check_group_partitions","text":"dataset Data frame outcome variable columns features. groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_group_partitions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the validity of the group_partitions list — check_group_partitions","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_group_partitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of the group_partitions list — check_group_partitions","text":"","code":"if (FALSE) { # \\dontrun{ check_group_partitions(   otu_mini_bin,   sample(LETTERS[1:8],     size = nrow(otu_mini_bin),     replace = TRUE   ),   list(train = c(\"A\", \"B\"), test = c(\"C\", \"D\")) ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Check grouping vector — check_groups","title":"Check grouping vector — check_groups","text":"Check grouping vector","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check grouping vector — check_groups","text":"","code":"check_groups(dataset, groups, kfold)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check grouping vector — check_groups","text":"dataset Data frame outcome variable columns features. groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). kfold Fold number k-fold cross-validation (default: 5).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_groups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check grouping vector — check_groups","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check grouping vector — check_groups","text":"","code":"if (FALSE) { # \\dontrun{ check_groups(mikropml::otu_mini_bin,   sample(LETTERS, nrow(mikropml::otu_mini_bin), replace = TRUE),   kfold = 2 ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_kfold.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that kfold is an integer of reasonable size — check_kfold","title":"Check that kfold is an integer of reasonable size — check_kfold","text":"Check kfold integer reasonable size","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_kfold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that kfold is an integer of reasonable size — check_kfold","text":"","code":"check_kfold(kfold, dataset)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_kfold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that kfold is an integer of reasonable size — check_kfold","text":"kfold Fold number k-fold cross-validation (default: 5). dataset Data frame outcome variable columns features.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_kfold.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that kfold is an integer of reasonable size — check_kfold","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_kfold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that kfold is an integer of reasonable size — check_kfold","text":"","code":"if (FALSE) { # \\dontrun{ check_kfold(5, otu_small) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the method is supported. If not, throws error. — check_method","title":"Check if the method is supported. If not, throws error. — check_method","text":"Check method supported. , throws error.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the method is supported. If not, throws error. — check_method","text":"","code":"check_method(method, hyperparameters)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the method is supported. If not, throws error. — check_method","text":"method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost hyperparameters Dataframe hyperparameters (default NULL; sensible defaults chosen automatically).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if the method is supported. If not, throws error. — check_method","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the method is supported. If not, throws error. — check_method","text":"","code":"if (FALSE) { # \\dontrun{ check_method(\"rf\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_ntree.html","id":null,"dir":"Reference","previous_headings":"","what":"Check ntree — check_ntree","title":"Check ntree — check_ntree","text":"Check ntree","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_ntree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check ntree — check_ntree","text":"","code":"check_ntree(ntree)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_ntree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check ntree — check_ntree","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_ntree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check ntree — check_ntree","text":"","code":"if (FALSE) { # \\dontrun{ check_ntree(NULL) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","title":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","text":"Check outcome column exists. Pick outcome column specified.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","text":"","code":"check_outcome_column(   dataset,   outcome_colname,   check_values = TRUE,   show_message = TRUE )"},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). check_values whether check outcome values just get column (default:TRUE) show_message whether show column used output column (default: TRUE)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","text":"outcome colname","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_column.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that outcome column exists. Pick outcome column if not specified. — check_outcome_column","text":"","code":"if (FALSE) { # \\dontrun{ check_outcome_column(otu_small, NULL) check_outcome_column(otu_small, \"dx\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","title":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","text":"Check outcome variable valid. Pick outcome value necessary.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","text":"","code":"check_outcome_value(dataset, outcome_colname)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","text":"outcome value","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","text":"Zena Lapp, zenalapp@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_outcome_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the outcome variable is valid. Pick outcome value if necessary. — check_outcome_value","text":"","code":"if (FALSE) { # \\dontrun{ check_outcome_value(otu_small, \"dx\", \"cancer\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_packages_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether package(s) are installed — check_packages_installed","title":"Check whether package(s) are installed — check_packages_installed","text":"Check whether package(s) installed","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_packages_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether package(s) are installed — check_packages_installed","text":"","code":"check_packages_installed(...)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_packages_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether package(s) are installed — check_packages_installed","text":"... names packages check","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_packages_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether package(s) are installed — check_packages_installed","text":"named vector status packages; installed (TRUE) (FALSE)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_packages_installed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether package(s) are installed — check_packages_installed","text":"Kelly Sovacool sovacool@umich.edu Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_packages_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether package(s) are installed — check_packages_installed","text":"","code":"if (FALSE) { # \\dontrun{ check_packages_installed(\"base\") check_packages_installed(\"not-a-package-name\") all(check_packages_installed(\"parallel\", \"doFuture\")) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Check perf_metric_function is NULL or a function — check_perf_metric_function","title":"Check perf_metric_function is NULL or a function — check_perf_metric_function","text":"Check perf_metric_function NULL function","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check perf_metric_function is NULL or a function — check_perf_metric_function","text":"","code":"check_perf_metric_function(perf_metric_function)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check perf_metric_function is NULL or a function — check_perf_metric_function","text":"perf_metric_function performance metric function","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check perf_metric_function is NULL or a function — check_perf_metric_function","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check perf_metric_function is NULL or a function — check_perf_metric_function","text":"","code":"if (FALSE) { # \\dontrun{ check_perf_metric_function(NULL) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check perf_metric_name is NULL or a function — check_perf_metric_name","title":"Check perf_metric_name is NULL or a function — check_perf_metric_name","text":"Check perf_metric_name NULL function","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check perf_metric_name is NULL or a function — check_perf_metric_name","text":"","code":"check_perf_metric_name(perf_metric_name)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check perf_metric_name is NULL or a function — check_perf_metric_name","text":"perf_metric_name performance metric function","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check perf_metric_name is NULL or a function — check_perf_metric_name","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_perf_metric_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check perf_metric_name is NULL or a function — check_perf_metric_name","text":"","code":"if (FALSE) { # \\dontrun{ check_perf_metric_name(NULL) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that permute is a logical — check_permute","title":"Check that permute is a logical — check_permute","text":"Check permute logical","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that permute is a logical — check_permute","text":"","code":"check_permute(permute)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_permute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that permute is a logical — check_permute","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that permute is a logical — check_permute","text":"","code":"if (FALSE) { # \\dontrun{ do_permute <- TRUE check_permute(do_permute) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_remove_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Check remove_var — check_remove_var","title":"Check remove_var — check_remove_var","text":"Check remove_var","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_remove_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check remove_var — check_remove_var","text":"","code":"check_remove_var(remove_var)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_remove_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check remove_var — check_remove_var","text":"remove_var Whether remove variables near-zero variance ('nzv'; default), zero variance ('zv'), none (NULL).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_remove_var.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check remove_var — check_remove_var","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_remove_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check remove_var — check_remove_var","text":"","code":"if (FALSE) { # \\dontrun{ check_remove_var(NULL) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"check that the seed is either NA or a number — check_seed","title":"check that the seed is either NA or a number — check_seed","text":"check seed either NA number","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that the seed is either NA or a number — check_seed","text":"","code":"check_seed(seed)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that the seed is either NA or a number — check_seed","text":"seed random seed","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_seed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"check that the seed is either NA or a number — check_seed","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_seed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check that the seed is either NA or a number — check_seed","text":"","code":"if (FALSE) { # \\dontrun{ check_seed(2019) check_seed(NULL) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_frac.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the training fraction is between 0 and 1 — check_training_frac","title":"Check that the training fraction is between 0 and 1 — check_training_frac","text":"Check training fraction 0 1","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_frac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the training fraction is between 0 and 1 — check_training_frac","text":"","code":"check_training_frac(frac)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_frac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the training fraction is between 0 and 1 — check_training_frac","text":"frac fraction (numeric)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_frac.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that the training fraction is between 0 and 1 — check_training_frac","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_frac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the training fraction is between 0 and 1 — check_training_frac","text":"","code":"if (FALSE) { # \\dontrun{ check_training_frac(0.8) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of the training indices — check_training_indices","title":"Check the validity of the training indices — check_training_indices","text":"Check validity training indices","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of the training indices — check_training_indices","text":"","code":"check_training_indices(training_inds, dataset)"},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of the training indices — check_training_indices","text":"training_inds vector integers corresponding samples training set dataset data frame containing entire dataset","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_indices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the validity of the training indices — check_training_indices","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/check_training_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of the training indices — check_training_indices","text":"","code":"if (FALSE) { # \\dontrun{ training_indices <- otu_small %>%   nrow() %>%   sample(., size = 160) check_training_indices(training_indices, otu_small) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/cluster_corr_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster a matrix of correlated features — cluster_corr_mat","title":"Cluster a matrix of correlated features — cluster_corr_mat","text":"Cluster matrix correlated features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/cluster_corr_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster a matrix of correlated features — cluster_corr_mat","text":"","code":"cluster_corr_mat(bin_corr_mat, hclust_method = \"single\", cut_height = 0)"},{"path":"http://www.schlosslab.org/mikropml/reference/cluster_corr_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster a matrix of correlated features — cluster_corr_mat","text":"bin_corr_mat binary correlation matrix created get_binary_corr_mat(). hclust_method method use stats::hclust() (default: 'single'). cut_height cut height (h) use stats::cutree() (default: 0).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/cluster_corr_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster a matrix of correlated features — cluster_corr_mat","text":"named vector stats::cutree(). element cluster name feature cluster.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/cluster_corr_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cluster a matrix of correlated features — cluster_corr_mat","text":"Kelly Sovacool, sovacool@umich.edu Pat Schloss, pschloss@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/cluster_corr_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster a matrix of correlated features — cluster_corr_mat","text":"","code":"if (FALSE) { # \\dontrun{ corr_mat <- matrix(   data = c(1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1),   nrow = 4,   dimnames = list(     c(\"a\", \"b\", \"c\", \"d\"),     c(\"a\", \"b\", \"c\", \"d\")   ) ) corr_mat cluster_corr_mat(corr_mat) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/collapse_correlated_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse correlated features — collapse_correlated_features","title":"Collapse correlated features — collapse_correlated_features","text":"Collapse correlated features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/collapse_correlated_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse correlated features — collapse_correlated_features","text":"","code":"collapse_correlated_features(features, group_neg_corr = TRUE, progbar = NULL)"},{"path":"http://www.schlosslab.org/mikropml/reference/collapse_correlated_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse correlated features — collapse_correlated_features","text":"features dataframe features machine learning group_neg_corr Whether group negatively correlated features together (e.g. c(0,1) c(1,0)). progbar optional progress bar (default: NULL)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/collapse_correlated_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse correlated features — collapse_correlated_features","text":"features perfectly correlated ones collapsed","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/collapse_correlated_features.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collapse correlated features — collapse_correlated_features","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/collapse_correlated_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse correlated features — collapse_correlated_features","text":"","code":"if (FALSE) { # \\dontrun{ collapse_correlated_features(mikropml::otu_small[, 2:ncol(otu_small)]) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/combine_hp_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","title":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","text":"Combine hyperparameter performance metrics multiple train/test splits generated , instance, looping R using snakemake workflow high-performance computer.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/combine_hp_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","text":"","code":"combine_hp_performance(trained_model_lst)"},{"path":"http://www.schlosslab.org/mikropml/reference/combine_hp_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","text":"trained_model_lst List trained models.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/combine_hp_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","text":"Named list: dat: Dataframe performance metric group hyperparameters params: Hyperparameters tuned. Metric: Performance metric used.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/combine_hp_performance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/combine_hp_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine hyperparameter performance metrics for multiple train/test splits — combine_hp_performance","text":"","code":"if (FALSE) { # \\dontrun{ results <- lapply(seq(100, 102), function(seed) {   run_ml(otu_small, \"glmnet\", seed = seed, cv_times = 2, kfold = 2) }) models <- lapply(results, function(x) x$trained_model) combine_hp_performance(models) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","title":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","text":"wrapper permute_p_value().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","text":"","code":"compare_models(merged_data, metric, group_name, nperm = 10000)"},{"path":"http://www.schlosslab.org/mikropml/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","text":"merged_data concatenated performance data run_ml metric metric compare, must numeric group_name column group variables compare nperm number permutations, default=10000","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/compare_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","text":"table p-values pairs group variable","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/compare_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","text":"Courtney R Armour, armourc@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/compare_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform permutation tests to compare the performance metric across all pairs of a group variable. — compare_models","text":"","code":"df <- dplyr::tibble(   model = c(\"rf\", \"rf\", \"glmnet\", \"glmnet\", \"svmRadial\", \"svmRadial\"),   AUC = c(.2, 0.3, 0.8, 0.9, 0.85, 0.95) ) set.seed(123) compare_models(df, \"AUC\", \"model\", nperm = 10) #>   group1    group2   p_value #> 1 glmnet svmRadial 0.7272727 #> 2     rf    glmnet 0.2727273 #> 3     rf svmRadial 0.5454545"},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_data_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","title":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","text":"Split train test set splitting groups. group_partitions NULL, samples group go either training set testing set. Otherwise, groups split according group_partitions","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_data_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","text":"","code":"create_grouped_data_partition(   groups,   group_partitions = NULL,   training_frac = 0.8 )"},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_data_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","text":"groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation. training_frac Fraction data training set (default: 0.8). Rows dataset randomly selected training set, remaining rows used testing set. Alternatively, provide vector integers, used row indices training set. remaining rows used testing set.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_data_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","text":"vector row indices training set","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_data_partition.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","text":"Zena Lapp, zenalapp@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_data_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split into train and test set while splitting by groups. When group_partitions is NULL, all samples from each group will go into either the training set or the testing set. Otherwise, the groups will be split according to group_partitions — create_grouped_data_partition","text":"","code":"if (FALSE) { # \\dontrun{ groups <- c(\"A\", \"B\", \"A\", \"B\", \"C\", \"C\", \"A\", \"A\", \"D\") set.seed(0) create_grouped_data_partition(groups, training_frac = 0.8) groups <- rep.int(c(\"A\", \"B\", \"C\"), 3) create_grouped_data_partition(groups,   group_partitions = list(train = c(\"A\"), test = c(\"A\", \"B\", \"C\")) ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_k_multifolds.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","title":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","text":"Like createMultiFolds still splitting groups using groupKFold. Code modified createMultiFolds.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_k_multifolds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","text":"","code":"create_grouped_k_multifolds(groups, kfold = 10, cv_times = 5)"},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_k_multifolds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","text":"groups equivalent y caret::createMultiFolds kfold equivalent k caret::createMultiFolds cv_times equivalent cv_times caret::createMultiFolds","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_k_multifolds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","text":"indices folds CV","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_k_multifolds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/create_grouped_k_multifolds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splitting into folds for cross-validation when using groups — create_grouped_k_multifolds","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(0) groups <- c(\"A\", \"B\", \"A\", \"B\", \"C\", \"C\", \"A\", \"A\", \"D\") folds <- create_grouped_k_multifolds(groups, kfold = 2, cv_times = 2) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/define_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Define cross-validation scheme and training parameters — define_cv","title":"Define cross-validation scheme and training parameters — define_cv","text":"Define cross-validation scheme training parameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/define_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define cross-validation scheme and training parameters — define_cv","text":"","code":"define_cv(   train_data,   outcome_colname,   hyperparams_list,   perf_metric_function,   class_probs,   kfold = 5,   cv_times = 100,   groups = NULL,   group_partitions = NULL )"},{"path":"http://www.schlosslab.org/mikropml/reference/define_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define cross-validation scheme and training parameters — define_cv","text":"train_data Dataframe training model. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). hyperparams_list Named list lists hyperparameters. perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. class_probs Whether use class probabilities (TRUE categorical outcomes, FALSE numeric outcomes). kfold Fold number k-fold cross-validation (default: 5). cv_times Number cross-validation partitions create (default: 100). groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/define_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define cross-validation scheme and training parameters — define_cv","text":"Caret object trainControl controls cross-validation","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/define_cv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define cross-validation scheme and training parameters — define_cv","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/define_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define cross-validation scheme and training parameters — define_cv","text":"","code":"training_inds <- get_partition_indices(otu_small %>% dplyr::pull(\"dx\"),   training_frac = 0.8,   groups = NULL ) train_data <- otu_small[training_inds, ] test_data <- otu_small[-training_inds, ] cv <- define_cv(train_data,   outcome_colname = \"dx\",   hyperparams_list = get_hyperparams_list(otu_small, \"glmnet\"),   perf_metric_function = caret::multiClassSummary,   class_probs = TRUE,   kfold = 5 )"},{"path":"http://www.schlosslab.org/mikropml/reference/find_permuted_perf_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Get permuted performance metric difference for a single feature (or group of features) — find_permuted_perf_metric","title":"Get permuted performance metric difference for a single feature (or group of features) — find_permuted_perf_metric","text":"Requires future.apply package","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/find_permuted_perf_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get permuted performance metric difference for a single feature (or group of features) — find_permuted_perf_metric","text":"","code":"find_permuted_perf_metric(   test_data,   trained_model,   outcome_colname,   perf_metric_function,   perf_metric_name,   class_probs,   feat,   test_perf_value,   nperms = 100,   alpha = 0.05,   progbar = NULL )"},{"path":"http://www.schlosslab.org/mikropml/reference/find_permuted_perf_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get permuted performance metric difference for a single feature (or group of features) — find_permuted_perf_metric","text":"test_data Held test data: dataframe outcome features. trained_model Trained model caret::train(). outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". class_probs Whether use class probabilities (TRUE categorical outcomes, FALSE numeric outcomes). feat feature group correlated features permute. test_perf_value value true performance metric held-test data. nperms number permutations perform (default: 100). alpha alpha level confidence interval (default: 0.05 obtain 95% confidence interval) progbar optional progress bar (default: NULL)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/find_permuted_perf_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get permuted performance metric difference for a single feature (or group of features) — find_permuted_perf_metric","text":"vector mean permuted performance mean difference test permuted performance (test minus permuted performance)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/find_permuted_perf_metric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get permuted performance metric difference for a single feature (or group of features) — find_permuted_perf_metric","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Zena Lapp, zenalapp@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/flatten_corr_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten correlation matrix to pairs — flatten_corr_mat","title":"Flatten correlation matrix to pairs — flatten_corr_mat","text":"Flatten correlation matrix pairs","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/flatten_corr_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten correlation matrix to pairs — flatten_corr_mat","text":"","code":"flatten_corr_mat(cormat)"},{"path":"http://www.schlosslab.org/mikropml/reference/flatten_corr_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten correlation matrix to pairs — flatten_corr_mat","text":"cormat correlation matrix computed stats::cor","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/flatten_corr_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten correlation matrix to pairs — flatten_corr_mat","text":"flattened correlation matrix (pairs features correlation)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/flatten_corr_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flatten correlation matrix to pairs — flatten_corr_mat","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_binary_corr_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify correlated features as a binary matrix — get_binary_corr_mat","title":"Identify correlated features as a binary matrix — get_binary_corr_mat","text":"Identify correlated features binary matrix","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_binary_corr_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify correlated features as a binary matrix — get_binary_corr_mat","text":"","code":"get_binary_corr_mat(   features,   corr_thresh = 1,   group_neg_corr = TRUE,   corr_method = \"spearman\" )"},{"path":"http://www.schlosslab.org/mikropml/reference/get_binary_corr_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify correlated features as a binary matrix — get_binary_corr_mat","text":"features dataframe column feature ML corr_thresh feature importance, group correlations equal corr_thresh (range 0 1; default: 1). group_neg_corr Whether group negatively correlated features together (e.g. c(0,1) c(1,0)). corr_method correlation method. options supported stats::cor: spearman, pearson, kendall. (default: spearman)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_binary_corr_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify correlated features as a binary matrix — get_binary_corr_mat","text":"binary matrix correlated features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_binary_corr_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify correlated features as a binary matrix — get_binary_corr_mat","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_binary_corr_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify correlated features as a binary matrix — get_binary_corr_mat","text":"","code":"if (FALSE) { # \\dontrun{ features <- data.frame(   a = 1:3, b = 2:4, c = c(1, 0, 1),   d = (5:7), e = c(5, 1, 4) ) get_binary_corr_mat(features) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_dummyvars_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","title":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","text":"Get dummyvars dataframe (.e. design matrix)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_dummyvars_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","text":"","code":"get_caret_dummyvars_df(features, full_rank = FALSE, progbar = NULL)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_dummyvars_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","text":"features dataframe features machine learning full_rank whether matrix full rank (see `caret::dummyVars) progbar optional progress bar (default: NULL)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_dummyvars_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","text":"design matrix","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_dummyvars_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_dummyvars_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dummyvars dataframe (i.e. design matrix) — get_caret_dummyvars_df","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(   outcome = c(\"normal\", \"normal\", \"cancer\"),   var1 = 1:3,   var2 = c(\"a\", \"b\", \"c\"),   var3 = c(\"no\", \"yes\", \"no\"),   var4 = c(0, 1, 0) ) get_caret_dummyvars_df(df, TRUE) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_processed_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","title":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","text":"Get preprocessed dataframe continuous variables","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_processed_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","text":"","code":"get_caret_processed_df(features, method)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_processed_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","text":"features Dataframe features machine learning method Methods preprocess data, described caret::preProcess() (default: c(\"center\",\"scale\"), use NULL normalization).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_processed_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","text":"Named list: processed: Dataframe processed features. removed: Names features removed preprocessing.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_processed_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_caret_processed_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get preprocessed dataframe for continuous variables — get_caret_processed_df","text":"","code":"get_caret_processed_df(mikropml::otu_small[, 2:ncol(otu_small)], c(\"center\", \"scale\")) #> $processed #>      Otu00001     Otu00002   Otu00003    Otu00004    Otu00005    Otu00006 #> 1  -0.4198476 -0.218855527 -0.1742962 -0.59073845 -0.04877422 -0.16741683 #> 2  -0.1045750  1.754032339 -0.7184194  0.03805034  1.53707297 -0.57321773 #> 3  -0.7076423  0.696324396  1.4281464  0.60439092 -0.26455904 -0.03641025 #> 4  -0.4936041 -0.665193276  2.0157993 -0.59289184 -0.67557776 -0.58599886 #> 5   1.1116829 -0.395140184 -0.7537874 -0.58643168 -0.75435634  2.72750923 #> 6  -0.6845031  0.613808173 -0.1742962 -0.58427829  0.37594511  0.80394909 #> 7  -0.7698291 -0.496410093 -0.3184889  0.15863997 -0.65845198  2.20028760 #> 8  -0.4241862 -0.477656406 -0.3973867 -0.55628427 -0.39128981 -0.06197251 #> 9  -0.5557909  1.144537514  1.6158688 -0.35171258 -0.27483451 -0.46457812 #> 10  1.4573258 -0.451401245 -0.6939338 -0.05669866 -0.70640416  0.68891891 #> 11  0.2931312 -0.721454336 -0.7537874  3.03341063 -0.44951746 -0.24090833 #> 12  1.1044519  0.002437979 -0.4735640 -0.41846755  0.41362183 -0.35593851 #> 13 -0.5933922 -0.297621012 -0.3402538 -0.59289184 -0.65502682 -0.49972623 #> 14 -0.8016456  0.077452727 -0.4191516 -0.59073845 -0.04534906 -0.77452053 #> 15 -0.7915222  0.291244758 -0.2695178 -0.59289184 -0.22003202 -0.68824790 #> 16  1.4862499 -0.683946963 -0.7456255 -0.54551734 -0.74408087  0.91897926 #>       Otu00007     Otu00008    Otu00009    Otu00010    Otu00011    Otu00012 #> 1  -0.56874580 -0.062364359  0.05469266 -0.63787623  0.72598299 -0.02599851 #> 2  -0.64274431 -0.132045208 -0.40907548 -0.38331472  0.01116897  0.41335612 #> 3  -0.61247219 -0.207086122 -0.73691158  2.58656951 -0.77512645 -0.67898429 #> 4  -0.55192796 -0.469729320  0.13465268  0.02598025 -0.02010414 -0.65479963 #> 5   0.19142068 -0.676091833  1.26208901  1.70309134  1.58822740 -0.67495351 #> 6  -0.33665957 -0.006083674 -0.26514744 -0.34837491  0.55621466 -0.26784509 #> 7  -0.71674282  0.063597174 -0.84485761 -0.68279885 -0.48920084 -0.63867653 #> 8   0.37641695 -0.022163870  0.61841082  2.38192202 -0.75278851 -0.05824472 #> 9  -0.80419560  0.294079981 -0.40907548  0.28054175  0.18540489 -0.03809084 #> 10 -0.37029526  1.588535743 -0.72091957  0.49517204 -0.82873750  0.18360187 #> 11  0.06696865 -0.196365991  0.09067467  0.50016344  0.38644633  0.42544845 #> 12 -0.77728705  0.342320568  0.48247878  0.63493130 -0.48920084 -0.21141422 #> 13 -0.14157260 -0.217806252 -0.14520740 -0.24854687  1.11019552 -0.19932189 #> 14 -0.62256290 -0.421488732 -0.64495755 -0.60792781 -0.04690967 -0.61046109 #> 15 -0.58220008  0.899767356 -0.79688159 -0.89243773 -0.62769606 -0.50163013 #> 16  1.18030983 -0.424168765 -0.06524738 -0.05887359 -0.06478002 -0.50969168 #>      Otu00013     Otu00014    Otu00015   Otu00016   Otu00017     Otu00018 #> 1   1.5243040  1.671766383  1.25749765 -0.4950312  0.4761147  0.399615523 #> 2  -0.5512515  0.971673864  0.30580586 -0.5033126 -0.3211097 -0.679309939 #> 3  -0.9800853  0.007910136 -0.66585150 -0.4757081  0.4908327 -0.679309939 #> 4  -0.8428585 -0.542162557 -0.47950625 -0.5005521 -0.2671438  0.030253653 #> 5   0.5179740 -0.792195600 -0.96533493  0.3441451 -0.5296146 -0.674449915 #> 6   1.2155437  2.385497069  0.40563367 -0.1085684  3.3068745 -0.008626544 #> 7   0.3235694 -0.737642936 -0.49281662 -0.3984155 -0.5026316 -0.518929127 #> 8   0.2949805 -0.437603285 -0.60595481  3.7836639 -0.5345206  0.419055622 #> 9  -0.2196201  0.953489643 -0.94536936 -0.3294043  1.2929631 -0.679309939 #> 10 -0.6999139 -0.751281102 -0.89212787  0.1647160 -0.5222556 -0.436308709 #> 11  0.3921828 -0.792195600  0.65853079 -0.5033126 -0.5345206 -0.679309939 #> 12 -0.9114719  2.280937796  0.08618468  1.7271298  2.6592830 -0.664729865 #> 13 -0.5340982  0.485245945 -0.74571374 -0.4950312 -0.4437596 -0.650149792 #> 14 -0.6713250  0.958035698  0.13277099 -0.1223707  0.9470903 -0.120407110 #> 15 -0.7170673  0.262489234 -0.01364313 -0.4729476  0.6821665 -0.280787922 #> 16 -0.3396935 -0.769465323 -0.52609256 -0.1969028 -0.5345206  2.304745168 #>       Otu00019    Otu00020   Otu00021    Otu00022     Otu00023   Otu00024 #> 1   0.55293856  0.55481623 -0.3553701  1.64761210 -0.006925459 -0.1772044 #> 2   0.61541514 -0.36000866  0.1515983 -0.37570583 -0.664257143 -0.6784410 #> 3  -0.13846893 -0.52918860 -0.6310034 -0.08161892 -0.374718187  0.1771180 #> 4   0.08644676 -0.26601980  0.7422412 -0.18749021 -0.319940546  0.9548989 #> 5  -0.64244668 -0.68583670 -0.6310034 -0.36786351 -0.906843836 -0.6957250 #> 6  -0.08432256  0.17259487  0.7816173 -0.35610003 -0.343416678  0.8511948 #> 7  -0.52165862 -0.40387013 -0.6310034 -0.02672270  0.407819532 -0.6697990 #> 8   0.69871725 -0.02791469 -0.6063933 -0.20709600 -0.085179231 -0.5920209 #> 9   0.29053693 -0.67330485 -0.6310034  0.14188713 -0.899018459 -0.3932547 #> 10 -0.03017619  0.91823982 -0.5227189 -0.28159802 -0.406019696 -0.3414026 #> 11 -0.35921951  1.00596275 -0.6310034 -0.38354815  0.196534348  3.9623184 #> 12 -0.21344082 -0.64197523  0.4666078 -0.27375570  1.245134892  0.3240322 #> 13 -0.64244668 -0.52292268 -0.6260814 -0.37178467  0.071328313  0.4882304 #> 14 -0.34255909 -0.47906121  3.6019369 -0.27767686 -0.562527239 -0.2809085 #> 15 -0.30923825 -0.58558192 -0.1191130 -0.36002119 -0.695558652  0.1079819 #> 16 -0.35921951  1.08741976 -0.6260814 -0.30120381  1.691181392 -0.7130090 #>       Otu00025    Otu00026    Otu00027   Otu00028    Otu00029   Otu00030 #> 1  -0.24303824 -0.22202016 -0.24641906 -0.2925540  0.69582149  0.3919317 #> 2  -0.43616774 -0.29146475 -0.38539990 -0.3073944 -0.25226077  0.4472047 #> 3   0.04157367 -0.47086329 -0.41259180 -0.1688839  0.06672018 -0.5937702 #> 4  -0.28369708  0.43770350 -0.36425064 -0.3148146 -0.47377531 -0.7135284 #> 5  -0.39550890 -0.61553953 -0.06816104 -0.3148146 -0.57124171  0.3366587 #> 6   0.03649131 -0.45350214 -0.38842122 -0.3197614 -0.21681844 -0.5292851 #> 7  -0.42600303  0.87751927 -0.23131245 -0.2950274  3.07931802  0.1984761 #> 8  -0.35485005 -0.57503018  0.01945732 -0.3222348  0.03127785 -0.1700105 #> 9  -0.45141481 -0.62132658 -0.31288816 -0.3197614 -0.73073219 -0.1147375 #> 10  1.42397434 -0.62132658 -0.40957048  0.2144934  0.13760484 -0.7688014 #> 11 -0.07023815  0.46085170 -0.20412055 -0.3222348 -0.30542426  0.1616275 #> 12 -0.14647348 -0.58660428  0.02852128 -0.3197614 -0.73073219 -0.5477094 #> 13 -0.30402650 -0.37248345 -0.39748519 -0.3148146 -0.26998193 -0.6214067 #> 14 -0.26845001  1.35205733 -0.37935725 -0.3222348 -0.52693880  0.5485385 #> 15 -0.37009712 -0.26252951 -0.31288816 -0.3123412 -0.53579939 -0.3358296 #> 16 -0.43616774 -0.01368637 -0.32497345 -0.3073944 -0.34086658 -0.3818904 #>      Otu00031    Otu00032    Otu00033    Otu00034    Otu00035   Otu00036 #> 1   0.2730666  1.85022773 -0.35236586 -0.14829148 -0.28857253 -0.3377980 #> 2  -0.1402888 -0.49393851  0.15285109 -0.15073149  1.32771762 -0.3377980 #> 3  -0.4629076 -0.35782563 -0.28806552 -0.13609144 -0.09645535 -0.3096270 #> 4   1.5937875 -0.50150034 -0.43503772 -0.15073149 -0.24263146 -0.3377980 #> 5  -0.5637260 -0.57711860  0.95201244  0.04690915 -0.38463111 -0.3321638 #> 6  -0.2411072  0.33786241  0.07936499 -0.15073149 -0.31363129 -0.3377980 #> 7  -0.3520074 -0.39563477 -0.61875297 -0.15073149 -0.38880757  3.0990589 #> 8  -0.3822529 -0.35782563 -0.44422348 -0.15073149 -0.25098438 -0.3377980 #> 9   0.3335576 -0.07047622 -0.16865060 -0.07753125 -0.38880757 -0.3377980 #> 10 -0.4830713 -0.51662399  0.74073990 -0.06045120 -0.30110191  0.8115771 #> 11 -0.5939716 -0.57711860 -0.60038145 -0.15073149  1.31518824 -0.3377980 #> 12 -0.5233987  0.14881675  0.46516702  0.69351126 -0.25098438 -0.3377980 #> 13 -0.2209435  0.10344579 -0.45340924 -0.14585147  5.21182571 -0.3377980 #> 14  0.1420027  0.57227904 -0.64631026 -0.15073149 -0.31780775 -0.3377980 #> 15 -0.2411072  0.43616616 -0.65549602 -0.15073149 -0.20921978  0.1580109 #> 16 -0.4729895 -0.56955678  1.07142736 -0.08241127 -0.36792527 -0.3377980 #>       Otu00037    Otu00038    Otu00039    Otu00040    Otu00041    Otu00042 #> 1  -0.28026882 -0.26900974 -0.36969168 -0.20704023  0.12272828  0.69052599 #> 2  -0.40104181 -0.26900974  0.50452482 -0.32139200 -0.63077588 -0.30167974 #> 3   5.43380328 -0.25196493 -0.43941446  0.35201286  0.85558850 -0.29347970 #> 4  -0.28781713 -0.25480573  0.06473493 -0.33409775 -0.62045391  0.64132571 #> 5  -0.55200805 -0.26900974  0.25245013 -0.85503359  4.86051474  2.21163478 #> 6  -0.02362622 -0.26900974 -0.21415623  0.05978056  0.27755790 -0.30167974 #> 7  -0.19723739 -0.26900974 -0.38578155 -0.81691633 -0.42433639 -0.30167974 #> 8  -0.13685089 -0.26616894 -0.27851572  0.30118985 -0.66174181 -0.30167974 #> 9   0.32359613 -0.08435761 -0.13370685 -0.33409775  3.46704813 -0.29757972 #> 10 -0.51426649 -0.25480573 -0.41259801 -0.46115527  0.07111841 -0.30167974 #> 11  0.52740055 -0.26900974  0.10227797  0.50448189 -0.66174181 -0.30167974 #> 12 -0.54445974 -0.26616894 -0.41796130 -0.63903580  0.08144038 -0.30167974 #> 13 -0.55200805 -0.25764653  0.08082480  0.37742437  0.20530408 -0.01057806 #> 14 -0.43878337 -0.26900974 -0.39650813 -0.55009554  0.29820185  4.58144848 #> 15 -0.40859012 -0.26900974 -0.28924231 -0.37221501  1.71231241  3.25714082 #> 16  1.16145875 -0.26900974 -0.43941446  0.75859693 -0.65141983 -0.30167974 #>       Otu00043    Otu00044   Otu00045   Otu00046    Otu00047     Otu00048 #> 1   0.71982858 -0.61170426 -0.2339134  0.6935514 -0.20351219 -0.253544727 #> 2  -0.24396750 -0.62270910 -0.2339134 -0.5691107 -0.20866114 -0.253544727 #> 3  -0.46108640  0.02657670 -0.2339134 -0.5843235  0.34227636  0.007337307 #> 4  -0.12746468  0.09260576 -0.2339134 -0.5234723 -0.20866114 -0.253544727 #> 5  -0.46108640 -0.30356862 -0.1407517 -0.5843235 -0.20866114 -0.194846269 #> 6   0.54507434 -0.25954925 -0.2339134  0.7848281 -0.20866114 -0.253544727 #> 7   0.12672330  0.82993032 -0.2339134 -0.5843235 -0.03359689 -0.247022676 #> 8  -0.38165266 -0.20452503 -0.2339134  0.2219547 -0.20866114 -0.253544727 #> 9  -0.45579082 -0.53467035 -0.2339134 -0.5843235 -0.20866114 -0.070927303 #> 10 -0.46108640 -0.44663160 -0.2339134 -0.5843235  0.50189377 -0.207890371 #> 11 -0.46108640  0.23566874 -0.2339134  1.8953622 -0.20351219 -0.247022676 #> 12  0.31206870 -0.62270910 -0.2339134 -0.1887908 -0.20866114 -0.116581659 #> 13 -0.46108640 -0.31457347 -0.2339134 -0.5843235 -0.20866114 -0.227456524 #> 14 -0.09569118 -0.57868973 -0.1873326  0.2980187 -0.20866114 -0.253544727 #> 15 -0.02684861  0.88495454 -0.2339134  1.1803608 -0.20866114 -0.253544727 #> 16  0.53977876 -0.61170426 -0.1034871 -0.5843235 -0.19321430 -0.253544727 #>       Otu00049   Otu00050    Otu00051    Otu00052    Otu00053    Otu00054 #> 1   0.60651290 -0.4753858 -0.20991733  0.19735560 -0.08276103 -0.18688626 #> 2  -0.42970775 -0.4506422 -0.20991733 -0.25745566  0.65153274 -0.45315341 #> 3  -0.42161228  0.3040366 -0.16859502  5.36271211 -0.18984553  1.12780781 #> 4  -0.43780323  1.3803818 -0.20991733 -0.25745566 -0.12865439 -0.08703608 #> 5   0.42841248 -0.5496165  2.09035789 -0.25745566 -0.46520570 -0.53636190 #> 6  -0.43780323 -0.4753858 -0.20991733 -0.25745566 -0.34282340 -0.58628699 #> 7   0.01554331 -0.5248729 -0.20991733  0.06740953 -0.08276103 -0.33666153 #> 8  -0.33256207  1.6525611 -0.20991733 -0.22496914 -0.38871676 -0.51972020 #> 9  -0.31637112  0.3906391 -0.20991733 -0.25745566  1.09516856  0.76169047 #> 10 -0.42970775 -0.4753858 -0.20991733 -0.25745566 -0.37341898  0.26243956 #> 11 -0.43780323  3.3846108 -0.20991733 -0.25745566 -0.46520570 -0.58628699 #> 12 -0.40542133 -0.5496165 -0.20991733 -0.25745566 -0.41931234 -0.38658662 #> 13 -0.42161228 -0.5496165 -0.20991733 -0.25745566  0.08551463 -0.30337814 #> 14 -0.43780323 -0.4258987  0.04490358 -0.25745566 -0.35812119 -0.50307850 #> 15 -0.40542133  0.1926905 -0.20991733 -0.25745566  0.02432348 -0.58628699 #> 16  8.67770035 -0.2032066  0.84380156 -0.25745566 -0.46520570 -0.53636190 #>       Otu00055    Otu00056    Otu00057    Otu00058    Otu00059    Otu00060 #> 1  -0.25600918 -0.67302626 -0.06308524  0.24402844 -0.04265350 -0.41506494 #> 2  -0.41855470  2.49956176 -0.37827265  0.95629418 -0.33573273 -0.41506494 #> 3  -0.37791832 -0.80430576  2.65898785 -0.31339693 -0.40900254 -0.40518715 #> 4  -0.40500924  0.18029052 -0.34006811 -0.06565232 -0.29386427 -0.41506494 #> 5  -0.20182735 -0.80430576 -0.42602832 -0.56114154 -0.39853543 -0.40518715 #> 6  -0.28310010  0.77104829  0.78696566  0.15112421  0.66911037 -0.41506494 #> 7  -0.43210016 -0.82618568 -0.24455678 -0.54565750 -0.29386427 -0.41506494 #> 8  -0.41855470 -0.62926642 -0.42602832 -0.40630116  7.84955171 -0.16812007 #> 9   0.13680914  0.24593027 -0.42602832 -0.48372135 -0.40900254 -0.41506494 #> 10  0.09617276 -0.23542791 -0.40692605 -0.57662557 -0.40900254  2.69644047 #> 11 -0.29664556 -0.82618568 -0.40692605  2.79889470 -0.40900254  0.40479204 #> 12 -0.29664556 -0.56362667  0.55773845 -0.20500866  0.09341901  0.04919142 #> 13 -0.41855470  0.66164870 -0.42602832  1.73049608 -0.40900254 -0.41506494 #> 14 -0.35082740  0.04901101  0.52908505  0.21306036  0.69004460 -0.41506494 #> 15 -0.29664556  1.82128432  1.40778935  0.83242188 -0.05312061 -0.41506494 #> 16 -0.43210016  1.66812490 -0.39737492 -0.15855655 -0.40900254 -0.41506494 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 184 rows ] #>  #> $removed #> character(0) #>"},{"path":"http://www.schlosslab.org/mikropml/reference/get_corr_feats.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify correlated features — get_corr_feats","title":"Identify correlated features — get_corr_feats","text":"Identify correlated features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_corr_feats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify correlated features — get_corr_feats","text":"","code":"get_corr_feats(   features,   corr_thresh = 1,   group_neg_corr = TRUE,   corr_method = \"spearman\" )"},{"path":"http://www.schlosslab.org/mikropml/reference/get_corr_feats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify correlated features — get_corr_feats","text":"features dataframe column feature ML corr_thresh feature importance, group correlations equal corr_thresh (range 0 1; default: 1). group_neg_corr Whether group negatively correlated features together (e.g. c(0,1) c(1,0)). corr_method correlation method. options supported stats::cor: spearman, pearson, kendall. (default: spearman)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_corr_feats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify correlated features — get_corr_feats","text":"Dataframe correlated features columns feature1, feature2, correlation two features (anything exceeding corr_thresh).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_corr_feats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify correlated features — get_corr_feats","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the difference in the mean of the metric for two groups — get_difference","title":"Calculate the difference in the mean of the metric for two groups — get_difference","text":"Calculate difference mean metric two groups","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the difference in the mean of the metric for two groups — get_difference","text":"","code":"get_difference(sub_data, group_name, metric)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the difference in the mean of the metric for two groups — get_difference","text":"sub_data subset merged performance data frame two groups group_name name column group variable metric metric compare","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the difference in the mean of the metric for two groups — get_difference","text":"numeric difference average metric two groups","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_difference.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the difference in the mean of the metric for two groups — get_difference","text":"Courtney Armour, armourc@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the difference in the mean of the metric for two groups — get_difference","text":"","code":"if (FALSE) { # \\dontrun{ df <- dplyr::tibble(   condition = c(\"a\", \"a\", \"b\", \"b\"),   AUC = c(.2, 0.3, 0.8, 0.9) ) get_difference(df, \"condition\", \"AUC\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get feature importance using the permutation method — get_feature_importance","title":"Get feature importance using the permutation method — get_feature_importance","text":"Calculates feature importance using trained model test data. Requires future.apply package.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get feature importance using the permutation method — get_feature_importance","text":"","code":"get_feature_importance(   trained_model,   test_data,   outcome_colname,   perf_metric_function,   perf_metric_name,   class_probs,   method,   seed = NA,   corr_thresh = 1,   groups = NULL,   nperms = 100,   corr_method = \"spearman\" )"},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get feature importance using the permutation method — get_feature_importance","text":"trained_model Trained model caret::train(). test_data Held test data: dataframe outcome features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". class_probs Whether use class probabilities (TRUE categorical outcomes, FALSE numeric outcomes). method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost seed Random seed (default: NA). results reproducible set seed. corr_thresh feature importance, group correlations equal corr_thresh (range 0 1; default: 1). groups Vector feature names group together permutation. element string feature names separated pipe character (|). NULL (default), correlated features grouped together based corr_thresh. nperms number permutations perform (default: 100). corr_method correlation method. options supported stats::cor: spearman, pearson, kendall. (default: spearman)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get feature importance using the permutation method — get_feature_importance","text":"Data frame performance metrics feature (group correlated features; feat) permuted (perf_metric), differences actual test performance metric permuted performance metric (perf_metric_diff; test minus permuted performance), p-value (pvalue: probability obtaining actual performance value null hypothesis). Features larger perf_metric_diff important. performance metric name (perf_metric_name) seed (seed) also returned.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get feature importance using the permutation method — get_feature_importance","text":"permutation tests, p-value number permutation statistics greater test statistic, divided number permutations. case, permutation statistic model performance (e.g. AUROC) randomizing order observations one feature, test statistic actual performance test data. default perform 100 permutations per feature; increasing increase precision estimating null distribution, also increases runtime. p-value represents probability obtaining actual performance event null hypothesis true, null hypothesis feature important model performance. strongly recommend providing multiple cores speed computation time. See vignette parallel processing details.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get feature importance using the permutation method — get_feature_importance","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Zena Lapp, zenalapp@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_feature_importance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get feature importance using the permutation method — get_feature_importance","text":"","code":"if (FALSE) { # \\dontrun{ # If you called `run_ml()` with `feature_importance = FALSE` (the default), # you can use `get_feature_importance()` later as long as you have the # trained model and test data. results <- run_ml(otu_small, \"glmnet\", kfold = 2, cv_times = 2) names(results$trained_model$trainingData)[1] <- \"dx\" feat_imp <- get_feature_importance(results$trained_model,   results$trained_model$trainingData,   results$test_data,   \"dx\",   multiClassSummary,   \"AUC\",   class_probs = TRUE,   method = \"glmnet\" )  # We strongly recommend providing multiple cores to speed up computation time. # Do this before calling `get_feature_importance()`. doFuture::registerDoFuture() future::plan(future::multicore, workers = 2)  # Optionally, you can group features together with a custom grouping feat_imp <- get_feature_importance(results$trained_model,   results$trained_model$trainingData,   results$test_data,   \"dx\",   multiClassSummary,   \"AUC\",   class_probs = TRUE,   method = \"glmnet\",   groups = c(     \"Otu00007\", \"Otu00008\", \"Otu00009\", \"Otu00011\", \"Otu00012\",     \"Otu00015\", \"Otu00016\", \"Otu00018\", \"Otu00019\", \"Otu00020\", \"Otu00022\",     \"Otu00023\", \"Otu00025\", \"Otu00028\", \"Otu00029\", \"Otu00030\", \"Otu00035\",     \"Otu00036\", \"Otu00037\", \"Otu00038\", \"Otu00039\", \"Otu00040\", \"Otu00047\",     \"Otu00050\", \"Otu00052\", \"Otu00054\", \"Otu00055\", \"Otu00056\", \"Otu00060\",     \"Otu00003|Otu00002|Otu00005|Otu00024|Otu00032|Otu00041|Otu00053\",     \"Otu00014|Otu00021|Otu00017|Otu00031|Otu00057\",     \"Otu00013|Otu00006\", \"Otu00026|Otu00001|Otu00034|Otu00048\",     \"Otu00033|Otu00010\",     \"Otu00042|Otu00004\", \"Otu00043|Otu00027|Otu00049\", \"Otu00051|Otu00045\",     \"Otu00058|Otu00044\", \"Otu00059|Otu00046\"   ) )  # the function can show a progress bar if you have the `progressr` package installed. ## optionally, specify the progress bar format: progressr::handlers(progressr::handler_progress(   format = \":message :bar :percent | elapsed: :elapsed | eta: :eta\",   clear = FALSE,   show_after = 0 )) ## tell progressr to always report progress progressr::handlers(global = TRUE) ## run the function and watch the live progress udpates feat_imp <- get_feature_importance(results$trained_model,   results$trained_model$trainingData,   results$test_data,   \"dx\",   multiClassSummary,   \"AUC\",   class_probs = TRUE,   method = \"glmnet\" )  # You can specify any correlation method supported by `stats::cor`: feat_imp <- get_feature_importance(results$trained_model,   results$trained_model$trainingData,   results$test_data,   \"dx\",   multiClassSummary,   \"AUC\",   class_probs = TRUE,   method = \"glmnet\",   corr_method = \"pearson\" ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_groups_from_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign features to groups — get_groups_from_clusters","title":"Assign features to groups — get_groups_from_clusters","text":"Assign features groups","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_groups_from_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign features to groups — get_groups_from_clusters","text":"","code":"get_groups_from_clusters(cluster_ids)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_groups_from_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign features to groups — get_groups_from_clusters","text":"cluster_ids named vector created cluster_corr_mat(). element cluster name feature cluster.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_groups_from_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign features to groups — get_groups_from_clusters","text":"vector element group correlated features separated pipes (|)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_groups_from_clusters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign features to groups — get_groups_from_clusters","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_groups_from_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign features to groups — get_groups_from_clusters","text":"","code":"if (FALSE) { # \\dontrun{ corr_mat <- matrix(   data = c(1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1),   nrow = 4,   dimnames = list(     c(\"a\", \"b\", \"c\", \"d\"),     c(\"a\", \"b\", \"c\", \"d\")   ) ) corr_mat get_groups_from_clusters(cluster_corr_mat(corr_mat)) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_hp_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hyperparameter performance metrics — get_hp_performance","title":"Get hyperparameter performance metrics — get_hp_performance","text":"Get hyperparameter performance metrics","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hp_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hyperparameter performance metrics — get_hp_performance","text":"","code":"get_hp_performance(trained_model)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_hp_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hyperparameter performance metrics — get_hp_performance","text":"trained_model trained model (e.g. run_ml())","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hp_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hyperparameter performance metrics — get_hp_performance","text":"Named list: dat: Dataframe performance metric group hyperparameters. params: Hyperparameters tuned. metric: Performance metric used.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hp_performance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get hyperparameter performance metrics — get_hp_performance","text":"Zena Lapp, zenalapp@umich.edu Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hp_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hyperparameter performance metrics — get_hp_performance","text":"","code":"get_hp_performance(otu_mini_bin_results_glmnet$trained_model) #> $dat #>   alpha lambda       AUC #> 1     0  1e-04 0.6082552 #> 2     0  1e-03 0.6082552 #> 3     0  1e-02 0.6086458 #> 4     0  1e-01 0.6166789 #> 5     0  1e+00 0.6221737 #> 6     0  1e+01 0.6187408 #>  #> $params #> [1] \"lambda\" #>  #> $metric #> [1] \"AUC\" #>"},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","title":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","text":"Using get_hyperparams_list preferred function.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","text":"","code":"get_hyperparams_from_df(hyperparams_df, ml_method)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","text":"hyperparams_df dataframe hyperparameters columns param, value, method ml_method machine learning method","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","text":"named list lists hyperparameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_from_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split hyperparameters dataframe into named lists for each parameter — get_hyperparams_from_df","text":"","code":"if (FALSE) { # \\dontrun{ hparams_df <- dplyr::tibble(   param = c(\"alpha\", \"lambda\", \"lambda\"),   value = c(1, 0, 1),   method = rep(\"glmnet\", 3) ) get_hyperparams_from_df(hparams_df, \"glmnet\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","title":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","text":"details see vignette hyperparameter tuning.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","text":"","code":"get_hyperparams_list(dataset, method)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","text":"dataset Data frame outcome variable columns features. method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","text":"Named list hyperparameters.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_hyperparams_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set hyperparameters based on ML method and dataset characteristics — get_hyperparams_list","text":"","code":"get_hyperparams_list(otu_mini_bin, \"rf\") #> $mtry #> [1] 2 3 6 #>  get_hyperparams_list(otu_small, \"rf\") #> $mtry #> [1]  4  8 16 #>  get_hyperparams_list(otu_mini_bin, \"rpart2\") #> $maxdepth #> [1]  1  2  4  8 16 30 #>  get_hyperparams_list(otu_small, \"rpart2\") #> $maxdepth #> [1]  1  2  4  8 16 30 #>"},{"path":"http://www.schlosslab.org/mikropml/reference/get_outcome_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get outcome type. — get_outcome_type","title":"Get outcome type. — get_outcome_type","text":"outcome numeric, type continuous. Otherwise, outcome type binary two outcomes multiclass two outcomes.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_outcome_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get outcome type. — get_outcome_type","text":"","code":"get_outcome_type(outcomes_vec)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_outcome_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get outcome type. — get_outcome_type","text":"outcomes_vec Vector outcomes.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_outcome_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get outcome type. — get_outcome_type","text":"Outcome type (continuous, binary, multiclass).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_outcome_type.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get outcome type. — get_outcome_type","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_outcome_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get outcome type. — get_outcome_type","text":"","code":"get_outcome_type(c(1, 2, 1)) #> [1] \"continuous\" get_outcome_type(c(\"a\", \"b\", \"b\")) #> [1] \"binary\" get_outcome_type(c(\"a\", \"b\", \"c\")) #> [1] \"multiclass\""},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Select indices to partition the data into training & testing sets. — get_partition_indices","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"Use function get row indices training set.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"","code":"get_partition_indices(   outcomes,   training_frac = 0.8,   groups = NULL,   group_partitions = NULL )"},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"outcomes vector outcomes training_frac Fraction data training set (default: 0.8). Rows dataset randomly selected training set, remaining rows used testing set. Alternatively, provide vector integers, used row indices training set. remaining rows used testing set. groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"Vector row indices training set.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"groups NULL, uses createDataPartition. Otherwise, uses create_grouped_data_partition(). Set seed prior calling function like data partitions reproducible (recommended).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_partition_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select indices to partition the data into training & testing sets. — get_partition_indices","text":"","code":"training_inds <- get_partition_indices(otu_mini_bin$dx) train_data <- otu_mini_bin[training_inds, ] test_data <- otu_mini_bin[-training_inds, ]"},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default performance metric function — get_perf_metric_fn","title":"Get default performance metric function — get_perf_metric_fn","text":"Get default performance metric function","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default performance metric function — get_perf_metric_fn","text":"","code":"get_perf_metric_fn(outcome_type)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default performance metric function — get_perf_metric_fn","text":"outcome_type Type outcome (one : \"continuous\",\"binary\",\"multiclass\").","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default performance metric function — get_perf_metric_fn","text":"Performance metric function.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_fn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get default performance metric function — get_perf_metric_fn","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default performance metric function — get_perf_metric_fn","text":"","code":"get_perf_metric_fn(\"continuous\") #> function (data, lev = NULL, model = NULL)  #> { #>     if (is.character(data$obs))  #>         data$obs <- factor(data$obs, levels = lev) #>     postResample(data[, \"pred\"], data[, \"obs\"]) #> } #> <bytecode: 0x151552270> #> <environment: namespace:caret> get_perf_metric_fn(\"binary\") #> function (data, lev = NULL, model = NULL)  #> { #>     if (!all(levels(data[, \"pred\"]) == levels(data[, \"obs\"])))  #>         stop(\"levels of observed and predicted data do not match\") #>     has_class_probs <- all(lev %in% colnames(data)) #>     if (has_class_probs) { #>         lloss <- mnLogLoss(data = data, lev = lev, model = model) #>         requireNamespaceQuietStop(\"pROC\") #>         requireNamespaceQuietStop(\"MLmetrics\") #>         prob_stats <- lapply(levels(data[, \"pred\"]), function(x) { #>             obs <- ifelse(data[, \"obs\"] == x, 1, 0) #>             prob <- data[, x] #>             roc_auc <- try(pROC::roc(obs, data[, x], direction = \"<\",  #>                 quiet = TRUE), silent = TRUE) #>             roc_auc <- if (inherits(roc_auc, \"try-error\"))  #>                 NA #>             else roc_auc$auc #>             pr_auc <- try(MLmetrics::PRAUC(y_pred = data[, x],  #>                 y_true = obs), silent = TRUE) #>             if (inherits(pr_auc, \"try-error\"))  #>                 pr_auc <- NA #>             res <- c(ROC = roc_auc, AUC = pr_auc) #>             return(res) #>         }) #>         prob_stats <- do.call(\"rbind\", prob_stats) #>         prob_stats <- colMeans(prob_stats, na.rm = TRUE) #>     } #>     CM <- confusionMatrix(data[, \"pred\"], data[, \"obs\"], mode = \"everything\") #>     if (length(levels(data[, \"pred\"])) == 2) { #>         class_stats <- CM$byClass #>     } #>     else { #>         class_stats <- colMeans(CM$byClass) #>         names(class_stats) <- paste(\"Mean\", names(class_stats)) #>     } #>     overall_stats <- if (has_class_probs)  #>         c(CM$overall, logLoss = as.numeric(lloss), AUC = unname(prob_stats[\"ROC\"]),  #>             prAUC = unname(prob_stats[\"AUC\"])) #>     else CM$overall #>     stats <- c(overall_stats, class_stats) #>     stats <- stats[!names(stats) %in% c(\"AccuracyNull\", \"AccuracyLower\",  #>         \"AccuracyUpper\", \"AccuracyPValue\", \"McnemarPValue\", \"Mean Prevalence\",  #>         \"Mean Detection Prevalence\")] #>     names(stats) <- gsub(\"[[:blank:]]+\", \"_\", names(stats)) #>     stat_list <- c(\"Accuracy\", \"Kappa\", \"Mean_F1\", \"Mean_Sensitivity\",  #>         \"Mean_Specificity\", \"Mean_Pos_Pred_Value\", \"Mean_Neg_Pred_Value\",  #>         \"Mean_Precision\", \"Mean_Recall\", \"Mean_Detection_Rate\",  #>         \"Mean_Balanced_Accuracy\") #>     if (has_class_probs)  #>         stat_list <- c(\"logLoss\", \"AUC\", \"prAUC\", stat_list) #>     if (length(levels(data[, \"pred\"])) == 2)  #>         stat_list <- gsub(\"^Mean_\", \"\", stat_list) #>     stats <- stats[c(stat_list)] #>     return(stats) #> } #> <bytecode: 0x132619508> #> <environment: namespace:caret> get_perf_metric_fn(\"multiclass\") #> function (data, lev = NULL, model = NULL)  #> { #>     if (!all(levels(data[, \"pred\"]) == levels(data[, \"obs\"])))  #>         stop(\"levels of observed and predicted data do not match\") #>     has_class_probs <- all(lev %in% colnames(data)) #>     if (has_class_probs) { #>         lloss <- mnLogLoss(data = data, lev = lev, model = model) #>         requireNamespaceQuietStop(\"pROC\") #>         requireNamespaceQuietStop(\"MLmetrics\") #>         prob_stats <- lapply(levels(data[, \"pred\"]), function(x) { #>             obs <- ifelse(data[, \"obs\"] == x, 1, 0) #>             prob <- data[, x] #>             roc_auc <- try(pROC::roc(obs, data[, x], direction = \"<\",  #>                 quiet = TRUE), silent = TRUE) #>             roc_auc <- if (inherits(roc_auc, \"try-error\"))  #>                 NA #>             else roc_auc$auc #>             pr_auc <- try(MLmetrics::PRAUC(y_pred = data[, x],  #>                 y_true = obs), silent = TRUE) #>             if (inherits(pr_auc, \"try-error\"))  #>                 pr_auc <- NA #>             res <- c(ROC = roc_auc, AUC = pr_auc) #>             return(res) #>         }) #>         prob_stats <- do.call(\"rbind\", prob_stats) #>         prob_stats <- colMeans(prob_stats, na.rm = TRUE) #>     } #>     CM <- confusionMatrix(data[, \"pred\"], data[, \"obs\"], mode = \"everything\") #>     if (length(levels(data[, \"pred\"])) == 2) { #>         class_stats <- CM$byClass #>     } #>     else { #>         class_stats <- colMeans(CM$byClass) #>         names(class_stats) <- paste(\"Mean\", names(class_stats)) #>     } #>     overall_stats <- if (has_class_probs)  #>         c(CM$overall, logLoss = as.numeric(lloss), AUC = unname(prob_stats[\"ROC\"]),  #>             prAUC = unname(prob_stats[\"AUC\"])) #>     else CM$overall #>     stats <- c(overall_stats, class_stats) #>     stats <- stats[!names(stats) %in% c(\"AccuracyNull\", \"AccuracyLower\",  #>         \"AccuracyUpper\", \"AccuracyPValue\", \"McnemarPValue\", \"Mean Prevalence\",  #>         \"Mean Detection Prevalence\")] #>     names(stats) <- gsub(\"[[:blank:]]+\", \"_\", names(stats)) #>     stat_list <- c(\"Accuracy\", \"Kappa\", \"Mean_F1\", \"Mean_Sensitivity\",  #>         \"Mean_Specificity\", \"Mean_Pos_Pred_Value\", \"Mean_Neg_Pred_Value\",  #>         \"Mean_Precision\", \"Mean_Recall\", \"Mean_Detection_Rate\",  #>         \"Mean_Balanced_Accuracy\") #>     if (has_class_probs)  #>         stat_list <- c(\"logLoss\", \"AUC\", \"prAUC\", stat_list) #>     if (length(levels(data[, \"pred\"])) == 2)  #>         stat_list <- gsub(\"^Mean_\", \"\", stat_list) #>     stats <- stats[c(stat_list)] #>     return(stats) #> } #> <bytecode: 0x132619508> #> <environment: namespace:caret>"},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default performance metric name — get_perf_metric_name","title":"Get default performance metric name — get_perf_metric_name","text":"Get default performance metric name cross-validation.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default performance metric name — get_perf_metric_name","text":"","code":"get_perf_metric_name(outcome_type)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default performance metric name — get_perf_metric_name","text":"outcome_type Type outcome (one : \"continuous\",\"binary\",\"multiclass\").","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default performance metric name — get_perf_metric_name","text":"Performance metric name.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get default performance metric name — get_perf_metric_name","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_perf_metric_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default performance metric name — get_perf_metric_name","text":"","code":"get_perf_metric_name(\"continuous\") #> [1] \"RMSE\" get_perf_metric_name(\"binary\") #> [1] \"AUC\" get_perf_metric_name(\"multiclass\") #> [1] \"logLoss\""},{"path":"http://www.schlosslab.org/mikropml/reference/get_performance_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get model performance metrics as a one-row tibble — get_performance_tbl","title":"Get model performance metrics as a one-row tibble — get_performance_tbl","text":"Get model performance metrics one-row tibble","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_performance_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get model performance metrics as a one-row tibble — get_performance_tbl","text":"","code":"get_performance_tbl(   trained_model,   test_data,   outcome_colname,   perf_metric_function,   perf_metric_name,   class_probs,   method,   seed = NA )"},{"path":"http://www.schlosslab.org/mikropml/reference/get_performance_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get model performance metrics as a one-row tibble — get_performance_tbl","text":"trained_model Trained model caret::train(). test_data Held test data: dataframe outcome features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". class_probs Whether use class probabilities (TRUE categorical outcomes, FALSE numeric outcomes). method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost seed Random seed (default: NA). results reproducible set seed.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_performance_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get model performance metrics as a one-row tibble — get_performance_tbl","text":"one-row tibble column cross-validation performance, columns performance metrics test data, plus method, seed.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_performance_tbl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get model performance metrics as a one-row tibble — get_performance_tbl","text":"Kelly Sovacool, sovacool@umich.edu Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_performance_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get model performance metrics as a one-row tibble — get_performance_tbl","text":"","code":"if (FALSE) { # \\dontrun{ results <- run_ml(otu_small, \"glmnet\", kfold = 2, cv_times = 2) names(results$trained_model$trainingData)[1] <- \"dx\" get_performance_tbl(results$trained_model, results$test_data,   \"dx\",   multiClassSummary, \"AUC\",   class_probs = TRUE,   method = \"glmnet\" ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_seeds_trainControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get seeds for caret::trainControl() — get_seeds_trainControl","title":"Get seeds for caret::trainControl() — get_seeds_trainControl","text":"Adapted Stack Overflow post trainControl documentation.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_seeds_trainControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get seeds for caret::trainControl() — get_seeds_trainControl","text":"","code":"get_seeds_trainControl(hyperparams_list, kfold, cv_times, ncol_train)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_seeds_trainControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get seeds for caret::trainControl() — get_seeds_trainControl","text":"hyperparams_list Named list lists hyperparameters. kfold Fold number k-fold cross-validation (default: 5). cv_times Number cross-validation partitions create (default: 100). ncol_train number columns training data","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_seeds_trainControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get seeds for caret::trainControl() — get_seeds_trainControl","text":"seeds caret::trainControl()","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_seeds_trainControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get seeds for caret::trainControl() — get_seeds_trainControl","text":"Kelly Sovacool, sovacool@umich.edu Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_seeds_trainControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get seeds for caret::trainControl() — get_seeds_trainControl","text":"","code":"if (FALSE) { # \\dontrun{ get_seeds_trainControl(   get_hyperparams_list(otu_small, \"glmnet\"),   5, 100, 60 ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/get_tuning_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","title":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","text":"Generate tuning grid tuning hyperparameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_tuning_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","text":"","code":"get_tuning_grid(hyperparams_list, method)"},{"path":"http://www.schlosslab.org/mikropml/reference/get_tuning_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","text":"hyperparams_list Named list lists hyperparameters. method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_tuning_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","text":"tuning grid.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_tuning_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/get_tuning_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the tuning grid for tuning hyperparameters — get_tuning_grid","text":"","code":"ml_method <- \"glmnet\" hparams_list <- get_hyperparams_list(otu_small, ml_method) get_tuning_grid(hparams_list, ml_method) #>   lambda alpha #> 1  1e-04     0 #> 2  1e-03     0 #> 3  1e-02     0 #> 4  1e-01     0 #> 5  1e+00     0 #> 6  1e+01     0"},{"path":"http://www.schlosslab.org/mikropml/reference/group_correlated_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Group correlated features — group_correlated_features","title":"Group correlated features — group_correlated_features","text":"Group correlated features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/group_correlated_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group correlated features — group_correlated_features","text":"","code":"group_correlated_features(   features,   corr_thresh = 1,   group_neg_corr = TRUE,   corr_method = \"spearman\" )"},{"path":"http://www.schlosslab.org/mikropml/reference/group_correlated_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group correlated features — group_correlated_features","text":"features dataframe column feature ML corr_thresh feature importance, group correlations equal corr_thresh (range 0 1; default: 1). group_neg_corr Whether group negatively correlated features together (e.g. c(0,1) c(1,0)). corr_method correlation method. options supported stats::cor: spearman, pearson, kendall. (default: spearman)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/group_correlated_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group correlated features — group_correlated_features","text":"vector element group correlated features separated pipes (|)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/group_correlated_features.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group correlated features — group_correlated_features","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/group_correlated_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group correlated features — group_correlated_features","text":"","code":"features <- data.frame(   a = 1:3, b = 2:4, c = c(1, 0, 1),   d = (5:7), e = c(5, 1, 4), f = c(-1, 0, -1) ) group_correlated_features(features) #> [1] \"a|b|d\" \"c|f\"   \"e\""},{"path":"http://www.schlosslab.org/mikropml/reference/is_whole_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a numeric vector contains whole numbers. — is_whole_number","title":"Check whether a numeric vector contains whole numbers. — is_whole_number","text":".integer checks class, whether number integer mathematical sense. code copy-pasted .integer docs.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/is_whole_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a numeric vector contains whole numbers. — is_whole_number","text":"","code":"is_whole_number(x, tol = .Machine$double.eps^0.5)"},{"path":"http://www.schlosslab.org/mikropml/reference/is_whole_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a numeric vector contains whole numbers. — is_whole_number","text":"x numeric vector tol tolerance (default: .Machine$double.eps^0.5)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/is_whole_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a numeric vector contains whole numbers. — is_whole_number","text":"logical vector","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/is_whole_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a numeric vector contains whole numbers. — is_whole_number","text":"","code":"if (FALSE) { # \\dontrun{ is_whole_number(c(1, 2, 3)) is.integer(c(1, 2, 3)) is_whole_number(c(1.0, 2.0, 3.0)) is_whole_number(1.2) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/keep_groups_in_cv_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Whether groups can be kept together in partitions during cross-validation — keep_groups_in_cv_partitions","title":"Whether groups can be kept together in partitions during cross-validation — keep_groups_in_cv_partitions","text":"Whether groups can kept together partitions cross-validation","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/keep_groups_in_cv_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Whether groups can be kept together in partitions during cross-validation — keep_groups_in_cv_partitions","text":"","code":"keep_groups_in_cv_partitions(groups, group_partitions, kfold)"},{"path":"http://www.schlosslab.org/mikropml/reference/keep_groups_in_cv_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Whether groups can be kept together in partitions during cross-validation — keep_groups_in_cv_partitions","text":"groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation. kfold Fold number k-fold cross-validation (default: 5).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/keep_groups_in_cv_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Whether groups can be kept together in partitions during cross-validation — keep_groups_in_cv_partitions","text":"TRUE possible, FALSE otherwise","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/keep_groups_in_cv_partitions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Whether groups can be kept together in partitions during cross-validation — keep_groups_in_cv_partitions","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mikropml-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mikropml: User-Friendly R Package for Robust Machine Learning Pipelines — mikropml-package","title":"mikropml: User-Friendly R Package for Robust Machine Learning Pipelines — mikropml-package","text":"mikropml implements supervised machine learning pipelines using regression, support vector machines, decision trees, random forest, gradient-boosted trees. main functions preprocess_data() process data prior running machine learning, run_ml() run machine learning.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mikropml-package.html","id":"authors","dir":"Reference","previous_headings":"","what":"Authors","title":"mikropml: User-Friendly R Package for Robust Machine Learning Pipelines — mikropml-package","text":"Begüm D. Topçuoğlu (ORCID) Zena Lapp (ORCID) Kelly L. Sovacool (ORCID) Evan Snitkin (ORCID) Jenna Wiens (ORCID) Patrick D. Schloss (ORCID)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mikropml-package.html","id":"see-vignettes","dir":"Reference","previous_headings":"","what":"See vignettes","title":"mikropml: User-Friendly R Package for Robust Machine Learning Pipelines — mikropml-package","text":"Introduction Preprocessing data Hyperparameter tuning Parallel processing mikropml paper","code":""},{"path":[]},{"path":"http://www.schlosslab.org/mikropml/reference/mikropml-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mikropml: User-Friendly R Package for Robust Machine Learning Pipelines — mikropml-package","text":"Maintainer: Kelly Sovacool sovacool@umich.edu (ORCID) Authors: Begüm Topçuoğlu topcuoglu.begum@gmail.com (ORCID) Zena Lapp zenalapp@umich.edu (ORCID) Evan Snitkin (ORCID) Jenna Wiens (ORCID) Patrick Schloss pschloss@umich.edu (ORCID) contributors: Nick Lesniak nlesniak@umich.edu (ORCID) [contributor] Courtney Armour armourc@umich.edu (ORCID) [contributor] Sarah Lucas salucas@umich.edu (ORCID) [contributor]","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mutate_all_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate all columns with utils::type.convert().` — mutate_all_types","title":"Mutate all columns with utils::type.convert().` — mutate_all_types","text":"Turns factors characters numerics possible.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mutate_all_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate all columns with utils::type.convert().` — mutate_all_types","text":"","code":"mutate_all_types(dat)"},{"path":"http://www.schlosslab.org/mikropml/reference/mutate_all_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate all columns with utils::type.convert().` — mutate_all_types","text":"dat data.frame convert","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mutate_all_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate all columns with utils::type.convert().` — mutate_all_types","text":"data.frame factors","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mutate_all_types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mutate all columns with utils::type.convert().` — mutate_all_types","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/mutate_all_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate all columns with utils::type.convert().` — mutate_all_types","text":"","code":"if (FALSE) { # \\dontrun{ dat <- data.frame(   c1 = as.factor(c(\"a\", \"b\", \"c\")),   c2 = as.factor(1:3) ) class(dat$c1) class(dat$c2) dat <- mutate_all_types(dat) class(dat$c1) class(dat$c2) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_data_preproc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mini OTU abundance dataset - preprocessed — otu_data_preproc","title":"Mini OTU abundance dataset - preprocessed — otu_data_preproc","text":"result running preprocess_data(\"otu_mini_bin\")","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_data_preproc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mini OTU abundance dataset - preprocessed — otu_data_preproc","text":"","code":"otu_data_preproc"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_data_preproc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mini OTU abundance dataset - preprocessed — otu_data_preproc","text":"object class list length 3.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Mini OTU abundance dataset — otu_mini_bin","title":"Mini OTU abundance dataset — otu_mini_bin","text":"dataset containing relatives abundances OTUs human stool samples binary outcome, dx. subset otu_small.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mini OTU abundance dataset — otu_mini_bin","text":"","code":"otu_mini_bin"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mini OTU abundance dataset — otu_mini_bin","text":"data frame dx column diagnosis: healthy cancerous (colorectal). columns OTU relative abundances.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with L2 logistic regression on otu_mini_bin with feature importance and grouping — otu_mini_bin_results_glmnet","title":"Results from running the pipeline with L2 logistic regression on otu_mini_bin with feature importance and grouping — otu_mini_bin_results_glmnet","text":"Results running pipeline L2 logistic regression otu_mini_bin feature importance grouping","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with L2 logistic regression on otu_mini_bin with feature importance and grouping — otu_mini_bin_results_glmnet","text":"","code":"otu_mini_bin_results_glmnet"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_glmnet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with L2 logistic regression on otu_mini_bin with feature importance and grouping — otu_mini_bin_results_glmnet","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_rf.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with random forest on otu_mini_bin — otu_mini_bin_results_rf","title":"Results from running the pipeline with random forest on otu_mini_bin — otu_mini_bin_results_rf","text":"Results running pipeline random forest otu_mini_bin","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with random forest on otu_mini_bin — otu_mini_bin_results_rf","text":"","code":"otu_mini_bin_results_rf"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_rf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with random forest on otu_mini_bin — otu_mini_bin_results_rf","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_rpart2.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with rpart2 on otu_mini_bin — otu_mini_bin_results_rpart2","title":"Results from running the pipeline with rpart2 on otu_mini_bin — otu_mini_bin_results_rpart2","text":"Results running pipeline rpart2 otu_mini_bin","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_rpart2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with rpart2 on otu_mini_bin — otu_mini_bin_results_rpart2","text":"","code":"otu_mini_bin_results_rpart2"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_rpart2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with rpart2 on otu_mini_bin — otu_mini_bin_results_rpart2","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_svmRadial.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with svmRadial on otu_mini_bin — otu_mini_bin_results_svmRadial","title":"Results from running the pipeline with svmRadial on otu_mini_bin — otu_mini_bin_results_svmRadial","text":"Results running pipeline svmRadial otu_mini_bin","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_svmRadial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with svmRadial on otu_mini_bin — otu_mini_bin_results_svmRadial","text":"","code":"otu_mini_bin_results_svmRadial"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_svmRadial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with svmRadial on otu_mini_bin — otu_mini_bin_results_svmRadial","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_xgbTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with xbgTree on otu_mini_bin — otu_mini_bin_results_xgbTree","title":"Results from running the pipeline with xbgTree on otu_mini_bin — otu_mini_bin_results_xgbTree","text":"Results running pipeline xbgTree otu_mini_bin","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_xgbTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with xbgTree on otu_mini_bin — otu_mini_bin_results_xgbTree","text":"","code":"otu_mini_bin_results_xgbTree"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_bin_results_xgbTree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with xbgTree on otu_mini_bin — otu_mini_bin_results_xgbTree","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cont_results_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome — otu_mini_cont_results_glmnet","title":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome — otu_mini_cont_results_glmnet","text":"Results running pipeline glmnet otu_mini_bin Otu00001 outcome","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cont_results_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome — otu_mini_cont_results_glmnet","text":"","code":"otu_mini_cont_results_glmnet"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cont_results_glmnet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome — otu_mini_cont_results_glmnet","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cont_results_nocv.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome column, using a custom train control scheme that does not perform cross-validation — otu_mini_cont_results_nocv","title":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome column, using a custom train control scheme that does not perform cross-validation — otu_mini_cont_results_nocv","text":"Results running pipeline glmnet otu_mini_bin Otu00001 outcome column, using custom train control scheme perform cross-validation","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cont_results_nocv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome column, using a custom train control scheme that does not perform cross-validation — otu_mini_cont_results_nocv","text":"","code":"otu_mini_cont_results_nocv"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cont_results_nocv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with glmnet on otu_mini_bin with Otu00001 as the outcome column, using a custom train control scheme that does not perform cross-validation — otu_mini_cont_results_nocv","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross validation on train_data_mini with grouped features. — otu_mini_cv","title":"Cross validation on train_data_mini with grouped features. — otu_mini_cv","text":"Cross validation train_data_mini grouped features.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross validation on train_data_mini with grouped features. — otu_mini_cv","text":"","code":"otu_mini_cv"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_cv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cross validation on train_data_mini with grouped features. — otu_mini_cv","text":"object class list length 27.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Mini OTU abundance dataset with 3 categorical variables — otu_mini_multi","title":"Mini OTU abundance dataset with 3 categorical variables — otu_mini_multi","text":"dataset containing relatives abundances OTUs human stool samples","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mini OTU abundance dataset with 3 categorical variables — otu_mini_multi","text":"","code":"otu_mini_multi"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mini OTU abundance dataset with 3 categorical variables — otu_mini_multi","text":"data frame dx column colorectal cancer diagnosis: adenoma, carcinoma, normal. columns OTU relative abundances.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Groups for otu_mini_multi — otu_mini_multi_group","title":"Groups for otu_mini_multi — otu_mini_multi_group","text":"Groups otu_mini_multi","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Groups for otu_mini_multi — otu_mini_multi_group","text":"","code":"otu_mini_multi_group"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi_group.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Groups for otu_mini_multi — otu_mini_multi_group","text":"object class character length 490.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi_results_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from running the pipeline with glmnet on otu_mini_multi for multiclass outcomes — otu_mini_multi_results_glmnet","title":"Results from running the pipeline with glmnet on otu_mini_multi for multiclass outcomes — otu_mini_multi_results_glmnet","text":"Results running pipeline glmnet otu_mini_multi multiclass outcomes","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi_results_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from running the pipeline with glmnet on otu_mini_multi for multiclass outcomes — otu_mini_multi_results_glmnet","text":"","code":"otu_mini_multi_results_glmnet"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_mini_multi_results_glmnet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from running the pipeline with glmnet on otu_mini_multi for multiclass outcomes — otu_mini_multi_results_glmnet","text":"object class list length 4.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_small.html","id":null,"dir":"Reference","previous_headings":"","what":"Small OTU abundance dataset — otu_small","title":"Small OTU abundance dataset — otu_small","text":"dataset containing relatives abundances 60 OTUs 60 human stool samples. subset data provided extdata/otu_large.csv, used Topçuoğlu et al. 2020.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/otu_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small OTU abundance dataset — otu_small","text":"","code":"otu_small"},{"path":"http://www.schlosslab.org/mikropml/reference/otu_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Small OTU abundance dataset — otu_small","text":"data frame 60 rows 61 variables. dx column diagnosis: healthy cancerous (colorectal). columns OTU relative abundances.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/pbtick.html","id":null,"dir":"Reference","previous_headings":"","what":"Update progress if the progress bar is not NULL. — pbtick","title":"Update progress if the progress bar is not NULL. — pbtick","text":"allows flexible code initializes progress bar progressr package installed.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/pbtick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update progress if the progress bar is not NULL. — pbtick","text":"","code":"pbtick(pb, message = NULL)"},{"path":"http://www.schlosslab.org/mikropml/reference/pbtick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update progress if the progress bar is not NULL. — pbtick","text":"pb progress bar created progressr. message optional message report (default: NULL).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/pbtick.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update progress if the progress bar is not NULL. — pbtick","text":"Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/pbtick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update progress if the progress bar is not NULL. — pbtick","text":"","code":"if (FALSE) { # \\dontrun{ f <- function() {   if (isTRUE(check_packages_installed(\"progressr\"))) {     pb <- progressr::progressor(steps = 5, message = \"looping\")   } else {     pb <- NULL   }   for (i in 1:5) {     pbtick(pb)     Sys.sleep(0.5)   } } progressr::with_progress(   f() ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/permute_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculated a permuted p-value comparing two models — permute_p_value","title":"Calculated a permuted p-value comparing two models — permute_p_value","text":"Calculated permuted p-value comparing two models","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/permute_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculated a permuted p-value comparing two models — permute_p_value","text":"","code":"permute_p_value(   merged_data,   metric,   group_name,   group_1,   group_2,   nperm = 10000 )"},{"path":"http://www.schlosslab.org/mikropml/reference/permute_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculated a permuted p-value comparing two models — permute_p_value","text":"merged_data concatenated performance data run_ml metric metric compare, must numeric group_name column group variables compare group_1 name one group compare group_2 name group compare nperm number permutations, default=10000","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/permute_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculated a permuted p-value comparing two models — permute_p_value","text":"numeric p-value comparing two models","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/permute_p_value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculated a permuted p-value comparing two models — permute_p_value","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Courtney R Armour, armourc@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/permute_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculated a permuted p-value comparing two models — permute_p_value","text":"","code":"df <- dplyr::tibble(   model = c(\"rf\", \"rf\", \"glmnet\", \"glmnet\", \"svmRadial\", \"svmRadial\"),   AUC = c(.2, 0.3, 0.8, 0.9, 0.85, 0.95) ) set.seed(123) permute_p_value(df, \"AUC\", \"model\", \"rf\", \"glmnet\", nperm = 100) #> [1] 0.3663366"},{"path":"http://www.schlosslab.org/mikropml/reference/plot_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC and PRC curves — plot_mean_roc","title":"Plot ROC and PRC curves — plot_mean_roc","text":"Plot ROC PRC curves","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC and PRC curves — plot_mean_roc","text":"","code":"plot_mean_roc(dat, ribbon_fill = \"#C6DBEF\", line_color = \"#08306B\")  plot_mean_prc(   dat,   baseline_precision = NULL,   ycol = mean_precision,   ribbon_fill = \"#C7E9C0\",   line_color = \"#00441B\" )"},{"path":"http://www.schlosslab.org/mikropml/reference/plot_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC and PRC curves — plot_mean_roc","text":"dat sensitivity, specificity, precision data calculated calc_mean_roc() ribbon_fill ribbon fill color (default: \"#D9D9D9\") line_color line color (default: \"#000000\") baseline_precision baseline precision calc_baseline_precision() ycol column y axis (Default: mean_precision)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_curves.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot ROC and PRC curves — plot_mean_roc","text":"plot_mean_roc(): Plot mean sensitivity specificity plot_mean_prc(): Plot mean precision recall","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_curves.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot ROC and PRC curves — plot_mean_roc","text":"Courtney Armour Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC and PRC curves — plot_mean_roc","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) # get performance for multiple models get_sensspec_seed <- function(seed) {   ml_result <- run_ml(otu_mini_bin, \"glmnet\", seed = seed)   sensspec <- calc_model_sensspec(     ml_result$trained_model,     ml_result$test_data,     \"dx\"   ) %>%     mutate(seed = seed)   return(sensspec) } sensspec_dat <- purrr::map_dfr(seq(100, 102), get_sensspec_seed)  # plot ROC & PRC sensspec_dat %>%   calc_mean_roc() %>%   plot_mean_roc() baseline_prec <- calc_baseline_precision(otu_mini_bin, \"dx\", \"cancer\") sensspec_dat %>%   calc_mean_prc() %>%   plot_mean_prc(baseline_precision = baseline_prec) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/plot_hp_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot hyperparameter performance metrics — plot_hp_performance","title":"Plot hyperparameter performance metrics — plot_hp_performance","text":"Plot hyperparameter performance metrics","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_hp_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot hyperparameter performance metrics — plot_hp_performance","text":"","code":"plot_hp_performance(dat, param_col, metric_col)"},{"path":"http://www.schlosslab.org/mikropml/reference/plot_hp_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot hyperparameter performance metrics — plot_hp_performance","text":"dat dataframe hyperparameters performance metric (e.g. get_hp_performance() combine_hp_performance()) param_col hyperparameter plotted. must column dat. metric_col performance metric. must column dat.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_hp_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot hyperparameter performance metrics — plot_hp_performance","text":"ggplot hyperparameter performance.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_hp_performance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot hyperparameter performance metrics — plot_hp_performance","text":"Zena Lapp, zenalapp@umich.edu Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_hp_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot hyperparameter performance metrics — plot_hp_performance","text":"","code":"# plot for a single `run_ml()` call hp_metrics <- get_hp_performance(otu_mini_bin_results_glmnet$trained_model) hp_metrics #> $dat #>   alpha lambda       AUC #> 1     0  1e-04 0.6082552 #> 2     0  1e-03 0.6082552 #> 3     0  1e-02 0.6086458 #> 4     0  1e-01 0.6166789 #> 5     0  1e+00 0.6221737 #> 6     0  1e+01 0.6187408 #>  #> $params #> [1] \"lambda\" #>  #> $metric #> [1] \"AUC\" #>  plot_hp_performance(hp_metrics$dat, lambda, AUC)  if (FALSE) { # \\dontrun{ # plot for multiple `run_ml()` calls results <- lapply(seq(100, 102), function(seed) {   run_ml(otu_small, \"glmnet\", seed = seed) }) models <- lapply(results, function(x) x$trained_model) hp_metrics <- combine_hp_performance(models) plot_hp_performance(hp_metrics$dat, lambda, AUC) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/plot_model_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","title":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","text":"ggplot2 required use function.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_model_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","text":"","code":"plot_model_performance(performance_df)"},{"path":"http://www.schlosslab.org/mikropml/reference/plot_model_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","text":"performance_df dataframe performance results multiple calls run_ml()","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_model_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","text":"ggplot2 plot performance.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_model_performance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","text":"Begüm Topçuoglu, topcuoglu.begum@gmail.com Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/plot_model_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot performance metrics for multiple ML runs with different parameters — plot_model_performance","text":"","code":"if (FALSE) { # \\dontrun{ # call `run_ml()` multiple times with different seeds results_lst <- lapply(seq(100, 104), function(seed) {   run_ml(otu_small, \"glmnet\", seed = seed) }) # extract and combine the performance results perf_df <- lapply(results_lst, function(result) {   result[[\"performance\"]] }) %>%   dplyr::bind_rows() # plot the performance results p <- plot_model_performance(perf_df)   # call `run_ml()` with different ML methods param_grid <- expand.grid(   seeds = seq(100, 104),   methods = c(\"glmnet\", \"rf\") ) results_mtx <- mapply(   function(seed, method) {     run_ml(otu_mini_bin, method, seed = seed, kfold = 2)   },   param_grid$seeds, param_grid$methods ) # extract and combine the performance results perf_df2 <- dplyr::bind_rows(results_mtx[\"performance\", ]) # plot the performance results p <- plot_model_performance(perf_df2)  # you can continue adding layers to customize the plot p +   theme_classic() +   scale_color_brewer(palette = \"Dark2\") +   coord_flip() } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess data prior to running machine learning — preprocess_data","title":"Preprocess data prior to running machine learning — preprocess_data","text":"Function preprocess data input run_ml().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess data prior to running machine learning — preprocess_data","text":"","code":"preprocess_data(   dataset,   outcome_colname,   method = c(\"center\", \"scale\"),   remove_var = \"nzv\",   collapse_corr_feats = TRUE,   to_numeric = TRUE,   group_neg_corr = TRUE,   prefilter_threshold = 1 )"},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess data prior to running machine learning — preprocess_data","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). method Methods preprocess data, described caret::preProcess() (default: c(\"center\",\"scale\"), use NULL normalization). remove_var Whether remove variables near-zero variance ('nzv'; default), zero variance ('zv'), none (NULL). collapse_corr_feats Whether keep one perfectly correlated features. to_numeric Whether change features numeric possible. group_neg_corr Whether group negatively correlated features together (e.g. c(0,1) c(1,0)). prefilter_threshold Remove features non-zero & non-NA values N rows fewer (default: 1). Set -1 keep columns step. step also skipped to_numeric set FALSE.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess data prior to running machine learning — preprocess_data","text":"Named list including: dat_transformed: Preprocessed data. grp_feats: features grouped together, named list features corresponding group. removed_feats: features removed preprocessing (e.g. zero variance near-zero variance features). progressr package installed, progress bar time elapsed estimated time completion can displayed.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":"more-details","dir":"Reference","previous_headings":"","what":"More details","title":"Preprocess data prior to running machine learning — preprocess_data","text":"See preprocessing vignette details. Note values outcome_colname contain spaces, converted underscores compatibility caret.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocess data prior to running machine learning — preprocess_data","text":"Zena Lapp, zenalapp@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/preprocess_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess data prior to running machine learning — preprocess_data","text":"","code":"preprocess_data(mikropml::otu_small, \"dx\") #> Using 'dx' as the outcome column. #> $dat_transformed #> # A tibble: 200 × 61 #>    dx    Otu00001 Otu00002 Otu00003 Otu00004 Otu00005 Otu00006 Otu00007 Otu00008 #>    <chr>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #>  1 norm…   -0.420   -0.219   -0.174  -0.591   -0.0488  -0.167    -0.569 -0.0624  #>  2 norm…   -0.105    1.75    -0.718   0.0381   1.54    -0.573    -0.643 -0.132   #>  3 norm…   -0.708    0.696    1.43    0.604   -0.265   -0.0364   -0.612 -0.207   #>  4 norm…   -0.494   -0.665    2.02   -0.593   -0.676   -0.586    -0.552 -0.470   #>  5 norm…    1.11    -0.395   -0.754  -0.586   -0.754    2.73      0.191 -0.676   #>  6 norm…   -0.685    0.614   -0.174  -0.584    0.376    0.804    -0.337 -0.00608 #>  7 canc…   -0.770   -0.496   -0.318   0.159   -0.658    2.20     -0.717  0.0636  #>  8 norm…   -0.424   -0.478   -0.397  -0.556   -0.391   -0.0620    0.376 -0.0222  #>  9 norm…   -0.556    1.14     1.62   -0.352   -0.275   -0.465    -0.804  0.294   #> 10 canc…    1.46    -0.451   -0.694  -0.0567  -0.706    0.689    -0.370  1.59    #> # ℹ 190 more rows #> # ℹ 52 more variables: Otu00009 <dbl>, Otu00010 <dbl>, Otu00011 <dbl>, #> #   Otu00012 <dbl>, Otu00013 <dbl>, Otu00014 <dbl>, Otu00015 <dbl>, #> #   Otu00016 <dbl>, Otu00017 <dbl>, Otu00018 <dbl>, Otu00019 <dbl>, #> #   Otu00020 <dbl>, Otu00021 <dbl>, Otu00022 <dbl>, Otu00023 <dbl>, #> #   Otu00024 <dbl>, Otu00025 <dbl>, Otu00026 <dbl>, Otu00027 <dbl>, #> #   Otu00028 <dbl>, Otu00029 <dbl>, Otu00030 <dbl>, Otu00031 <dbl>, … #>  #> $grp_feats #> NULL #>  #> $removed_feats #> character(0) #>   # the function can show a progress bar if you have the progressr package installed ## optionally, specify the progress bar format progressr::handlers(progressr::handler_progress(   format = \":message :bar :percent | elapsed: :elapsed | eta: :eta\",   clear = FALSE,   show_after = 0 )) ## tell progressor to always report progress if (FALSE) { # \\dontrun{ progressr::handlers(global = TRUE) ## run the function and watch the live progress udpates dat_preproc <- preprocess_data(mikropml::otu_small, \"dx\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/process_cat_feats.html","id":null,"dir":"Reference","previous_headings":"","what":"Process categorical features — process_cat_feats","title":"Process categorical features — process_cat_feats","text":"Process categorical features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cat_feats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process categorical features — process_cat_feats","text":"","code":"process_cat_feats(features, progbar = NULL)"},{"path":"http://www.schlosslab.org/mikropml/reference/process_cat_feats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process categorical features — process_cat_feats","text":"features dataframe features machine learning progbar optional progress bar (default: NULL)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cat_feats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process categorical features — process_cat_feats","text":"list two dataframes: categorical (processed) continuous features (unprocessed)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cat_feats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process categorical features — process_cat_feats","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cat_feats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process categorical features — process_cat_feats","text":"","code":"if (FALSE) { # \\dontrun{ process_cat_feats(mikropml::otu_small[, 2:ncol(otu_small)]) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/process_cont_feats.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess continuous features — process_cont_feats","title":"Preprocess continuous features — process_cont_feats","text":"Preprocess continuous features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cont_feats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess continuous features — process_cont_feats","text":"","code":"process_cont_feats(features, method)"},{"path":"http://www.schlosslab.org/mikropml/reference/process_cont_feats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess continuous features — process_cont_feats","text":"features Dataframe features machine learning method Methods preprocess data, described caret::preProcess() (default: c(\"center\",\"scale\"), use NULL normalization).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cont_feats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess continuous features — process_cont_feats","text":"dataframe preprocessed features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cont_feats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocess continuous features — process_cont_feats","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_cont_feats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess continuous features — process_cont_feats","text":"","code":"if (FALSE) { # \\dontrun{ process_cont_feats(mikropml::otu_small[, 2:ncol(otu_small)], c(\"center\", \"scale\")) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/process_novar_feats.html","id":null,"dir":"Reference","previous_headings":"","what":"Process features with no variation — process_novar_feats","title":"Process features with no variation — process_novar_feats","text":"Process features variation","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_novar_feats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process features with no variation — process_novar_feats","text":"","code":"process_novar_feats(features, progbar = NULL)"},{"path":"http://www.schlosslab.org/mikropml/reference/process_novar_feats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process features with no variation — process_novar_feats","text":"features dataframe features machine learning progbar optional progress bar (default: NULL)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_novar_feats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process features with no variation — process_novar_feats","text":"list two dataframes: features variability (unprocessed) without (processed)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_novar_feats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process features with no variation — process_novar_feats","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/process_novar_feats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process features with no variation — process_novar_feats","text":"","code":"if (FALSE) { # \\dontrun{ process_novar_feats(mikropml::otu_small[, 2:ncol(otu_small)]) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/radix_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Call sort() with method = 'radix' — radix_sort","title":"Call sort() with method = 'radix' — radix_sort","text":"BASE SORT FUNCTION USES DIFFERENT METHOD DEPENDING LOCALE. However, order radix method always stable.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/radix_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call sort() with method = 'radix' — radix_sort","text":"","code":"radix_sort(...)"},{"path":"http://www.schlosslab.org/mikropml/reference/radix_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call sort() with method = 'radix' — radix_sort","text":"... arguments forwarded sort().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/radix_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call sort() with method = 'radix' — radix_sort","text":"Whatever passed , now stable sorted order regardless locale.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/radix_sort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call sort() with method = 'radix' — radix_sort","text":"see https://stackoverflow.com/questions/42272119/r-cmd-check-fails-devtoolstest-works-fine stringr::str_sort() solves problem locale parameter default value, want add another dependency.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/radix_sort.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Call sort() with method = 'radix' — radix_sort","text":"Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/randomize_feature_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","title":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","text":"Randomize feature order eliminate position-dependent effects","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/randomize_feature_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","text":"","code":"randomize_feature_order(dataset, outcome_colname)"},{"path":"http://www.schlosslab.org/mikropml/reference/randomize_feature_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/randomize_feature_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","text":"Dataset feature order randomized.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/randomize_feature_order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","text":"Nick Lesniak, nlesniak@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/randomize_feature_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomize feature order to eliminate any position-dependent effects — randomize_feature_order","text":"","code":"dat <- data.frame(   outcome = c(\"1\", \"2\", \"3\"),   a = 4:6, b = 7:9, c = 10:12, d = 13:15 ) randomize_feature_order(dat, \"outcome\") #>   outcome  c b a  d #> 1       1 10 7 4 13 #> 2       2 11 8 5 14 #> 3       3 12 9 6 15"},{"path":"http://www.schlosslab.org/mikropml/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"caret contr.ltfr — reexports","title":"caret contr.ltfr — reexports","text":"objects imported packages. Follow links see documentation. caret contr.ltfr dplyr %>% rlang :=, !!, .data","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/remove_singleton_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","title":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","text":"Removes columns non-zero & non-NA values threshold row(s) fewer.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/remove_singleton_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","text":"","code":"remove_singleton_columns(dat, threshold = 1)"},{"path":"http://www.schlosslab.org/mikropml/reference/remove_singleton_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","text":"dat dataframe threshold Number rows. column non-zero & non-NA values threshold row(s) fewer, removed.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/remove_singleton_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","text":"dataframe without singleton columns","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/remove_singleton_columns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","text":"Kelly Sovacool, sovacool@umich.edu Courtney Armour","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/remove_singleton_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove columns appearing in only threshold row(s) or fewer. — remove_singleton_columns","text":"","code":"remove_singleton_columns(data.frame(a = 1:3, b = c(0, 1, 0), c = 4:6)) #> $dat #>   a c #> 1 1 4 #> 2 2 5 #> 3 3 6 #>  #> $removed_feats #> [1] \"b\" #>  remove_singleton_columns(data.frame(a = 1:3, b = c(0, 1, 0), c = 4:6), threshold = 0) #> $dat #>   a b c #> 1 1 0 4 #> 2 2 1 5 #> 3 3 0 6 #>  #> $removed_feats #> character(0) #>  remove_singleton_columns(data.frame(a = 1:3, b = c(0, 1, NA), c = 4:6)) #> $dat #>   a c #> 1 1 4 #> 2 2 5 #> 3 3 6 #>  #> $removed_feats #> [1] \"b\" #>  remove_singleton_columns(data.frame(a = 1:3, b = c(1, 1, 1), c = 4:6)) #> $dat #>   a b c #> 1 1 1 4 #> 2 2 1 5 #> 3 3 1 6 #>  #> $removed_feats #> character(0) #>"},{"path":"http://www.schlosslab.org/mikropml/reference/replace_spaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace spaces in all elements of a character vector with underscores — replace_spaces","title":"Replace spaces in all elements of a character vector with underscores — replace_spaces","text":"Replace spaces elements character vector underscores","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/replace_spaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace spaces in all elements of a character vector with underscores — replace_spaces","text":"","code":"replace_spaces(x, new_char = \"_\")"},{"path":"http://www.schlosslab.org/mikropml/reference/replace_spaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace spaces in all elements of a character vector with underscores — replace_spaces","text":"x character vector new_char character replace spaces (default: _)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/replace_spaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace spaces in all elements of a character vector with underscores — replace_spaces","text":"character vector spaces replaced new_char","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/replace_spaces.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace spaces in all elements of a character vector with underscores — replace_spaces","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/replace_spaces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace spaces in all elements of a character vector with underscores — replace_spaces","text":"","code":"dat <- data.frame(   dx = c(\"outcome 1\", \"outcome 2\", \"outcome 1\"),   a = 1:3, b = c(5, 7, 1) ) dat$dx <- replace_spaces(dat$dx) dat #>          dx a b #> 1 outcome_1 1 5 #> 2 outcome_2 2 7 #> 3 outcome_1 3 1"},{"path":"http://www.schlosslab.org/mikropml/reference/rm_missing_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove missing outcome values — rm_missing_outcome","title":"Remove missing outcome values — rm_missing_outcome","text":"Remove missing outcome values","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/rm_missing_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove missing outcome values — rm_missing_outcome","text":"","code":"rm_missing_outcome(dataset, outcome_colname)"},{"path":"http://www.schlosslab.org/mikropml/reference/rm_missing_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove missing outcome values — rm_missing_outcome","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/rm_missing_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove missing outcome values — rm_missing_outcome","text":"dataset missing outcomes","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/rm_missing_outcome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove missing outcome values — rm_missing_outcome","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/rm_missing_outcome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove missing outcome values — rm_missing_outcome","text":"","code":"if (FALSE) { # \\dontrun{ rm_missing_outcome(mikropml::otu_mini_bin, \"dx\")  test_df <- mikropml::otu_mini_bin test_df[1:100, \"dx\"] <- NA rm_missing_outcome(test_df, \"dx\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the machine learning pipeline — run_ml","title":"Run the machine learning pipeline — run_ml","text":"function splits data set train & test set, trains machine learning (ML) models using k-fold cross-validation, evaluates best model held-test set, optionally calculates feature importance using framework outlined Topçuoğlu et al. 2020 (doi:10.1128/mBio.00434-20 ). Required inputs data frame (must contain outcome variable columns features) ML method. See vignette('introduction') details.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the machine learning pipeline — run_ml","text":"","code":"run_ml(   dataset,   method,   outcome_colname = NULL,   hyperparameters = NULL,   find_feature_importance = FALSE,   calculate_performance = TRUE,   kfold = 5,   cv_times = 100,   cross_val = NULL,   training_frac = 0.8,   perf_metric_function = NULL,   perf_metric_name = NULL,   groups = NULL,   group_partitions = NULL,   corr_thresh = 1,   seed = NA,   ... )"},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the machine learning pipeline — run_ml","text":"dataset Data frame outcome variable columns features. method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). hyperparameters Dataframe hyperparameters (default NULL; sensible defaults chosen automatically). find_feature_importance Run permutation importance (default: FALSE). TRUE recommended like identify features important predicting outcome, resource-intensive. calculate_performance Whether calculate performance metrics (default: TRUE). might choose skip perform cross-validation model training. kfold Fold number k-fold cross-validation (default: 5). cv_times Number cross-validation partitions create (default: 100). cross_val custom cross-validation scheme caret::trainControl() (default: NULL, uses kfold cross validation repeated cv_times). kfold cv_times ignored user provides custom cross-validation scheme. See caret::trainControl() docs information use . training_frac Fraction data training set (default: 0.8). Rows dataset randomly selected training set, remaining rows used testing set. Alternatively, provide vector integers, used row indices training set. remaining rows used testing set. perf_metric_function Function calculate performance metric used cross-validation test performance. functions provided caret (see caret::defaultSummary()). Defaults: binary classification = twoClassSummary, multi-class classification = multiClassSummary, regression = defaultSummary. perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". groups Vector groups keep together splitting data train test sets. number groups training set larger kfold, groups also kept together cross-validation. Length matches number rows dataset (default: NULL). group_partitions Specify assign groups training testing partitions (default: NULL). groups specifies samples belong group \"\" belong group \"B\", setting group_partitions = list(train = c(\"\", \"B\"), test = c(\"B\")) result samples group \"\" placed training set, samples \"B\" also training set, remaining samples \"B\" testing set. partition sizes close training_frac possible. number groups training set larger kfold, groups also kept together cross-validation. corr_thresh feature importance, group correlations equal corr_thresh (range 0 1; default: 1). seed Random seed (default: NA). results reproducible set seed. ... additional arguments passed caret::train(), case weights via weights argument ntree rf models. See caret::train() docs details.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the machine learning pipeline — run_ml","text":"Named list results: trained_model: Output caret::train(), including best model. test_data: Part data used testing. performance: Data frame performance metrics. first column cross-validation performance metric, last two columns ML method used seed (one set), respectively. columns performance metrics calculated test data. contains one row, can easily combine performance data frames multiple calls run_ml() (see vignette(\"parallel\")). feature_importance: feature importances calculated, data frame row feature correlated group. columns performance metric permuted data, difference true performance metric performance metric permuted data (true - permuted), feature name, ML method, performance metric name, seed (provided). AUC RMSE, higher perf_metric_diff , important feature predicting outcome. log loss, lower perf_metric_diff , important feature predicting outcome.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":"more-details","dir":"Reference","previous_headings":"","what":"More details","title":"Run the machine learning pipeline — run_ml","text":"details, please see vignettes.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run the machine learning pipeline — run_ml","text":"Begüm Topçuoğlu, topcuoglu.begum@gmail.com Zena Lapp, zenalapp@umich.edu Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/run_ml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the machine learning pipeline — run_ml","text":"","code":"if (FALSE) { # \\dontrun{  # regression run_ml(otu_small, \"glmnet\",   seed = 2019 )  # random forest w/ feature importance run_ml(otu_small, \"rf\",   outcome_colname = \"dx\",   find_feature_importance = TRUE )  # custom cross validation & hyperparameters run_ml(otu_mini_bin[, 2:11],   \"glmnet\",   outcome_colname = \"Otu00001\",   seed = 2019,   hyperparameters = list(lambda = c(1e-04), alpha = 0),   cross_val = caret::trainControl(method = \"none\"),   calculate_performance = FALSE ) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/select_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use future apply if available — select_apply","title":"Use future apply if available — select_apply","text":"Use future apply available","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/select_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use future apply if available — select_apply","text":"","code":"select_apply(fun = \"apply\")"},{"path":"http://www.schlosslab.org/mikropml/reference/select_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use future apply if available — select_apply","text":"fun apply function use (apply, lapply, sapply, etc.)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/select_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use future apply if available — select_apply","text":"output apply function","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/select_apply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use future apply if available — select_apply","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/select_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use future apply if available — select_apply","text":"","code":"if (FALSE) { # \\dontrun{ select_apply(fun = \"sapply\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"Use functions calculate cumulative sensitivity, specificity, recall, etc. single models, concatenate results together multiple models, compute mean ROC PRC. can plot mean ROC PRC curves visualize results. Note: functions assume binary outcome.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"","code":"calc_model_sensspec(trained_model, test_data, outcome_colname = NULL)  calc_mean_roc(sensspec_dat)  calc_mean_prc(sensspec_dat)"},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"trained_model Trained model caret::train(). test_data Held test data: dataframe outcome features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). sensspec_dat data frame created concatenating results calc_model_sensspec() multiple models.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"data frame summarized performance","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"calc_model_sensspec(): Get sensitivity, specificity, precision model. calc_mean_roc(): Calculate mean sensitivity specificity multiple models calc_mean_prc(): Calculate mean precision recall multiple models","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"Courtney Armour Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/sensspec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and summarize performance for ROC and PRC plots — calc_model_sensspec","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) # get cumulative performance for a single model sensspec_1 <- calc_model_sensspec(   otu_mini_bin_results_glmnet$trained_model,   otu_mini_bin_results_glmnet$test_data,   \"dx\" ) head(sensspec_1)  # get performance for multiple models get_sensspec_seed <- function(seed) {   ml_result <- run_ml(otu_mini_bin, \"glmnet\", seed = seed)   sensspec <- calc_model_sensspec(     ml_result$trained_model,     ml_result$test_data,     \"dx\"   ) %>%     dplyr::mutate(seed = seed)   return(sensspec) } sensspec_dat <- purrr::map_dfr(seq(100, 102), get_sensspec_seed)  # calculate mean sensitivity over specificity roc_dat <- calc_mean_roc(sensspec_dat) head(roc_dat)  # calculate mean precision over recall prc_dat <- calc_mean_prc(sensspec_dat) head(prc_dat)  # plot ROC & PRC roc_dat %>% plot_mean_roc() baseline_prec <- calc_baseline_precision(otu_mini_bin, \"dx\", \"cancer\") prc_dat %>%   plot_mean_prc(baseline_precision = baseline_prec)  # balanced precision prior <- calc_baseline_precision(otu_mini_bin,   outcome_colname = \"dx\",   pos_outcome = \"cancer\" ) bprc_dat <- sensspec_dat %>%   dplyr::mutate(balanced_precision = calc_balanced_precision(precision, prior)) %>%   dplyr::rename(recall = sensitivity) %>%   calc_mean_perf(group_var = recall, sum_var = balanced_precision) bprc_dat %>% plot_mean_prc(ycol = mean_balanced_precision) + ylab(\"Mean Bal. Precision\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Set hyperparameters for regression models for use with glmnet — set_hparams_glmnet","title":"Set hyperparameters for regression models for use with glmnet — set_hparams_glmnet","text":"Alpha set 0 ridge (L2). alpha 1 make lasso (L1).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set hyperparameters for regression models for use with glmnet — set_hparams_glmnet","text":"","code":"set_hparams_glmnet()"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set hyperparameters for regression models for use with glmnet — set_hparams_glmnet","text":"default lambda & alpha values","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_glmnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set hyperparameters for regression models for use with glmnet — set_hparams_glmnet","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rf.html","id":null,"dir":"Reference","previous_headings":"","what":"Set hyparameters for random forest models — set_hparams_rf","title":"Set hyparameters for random forest models — set_hparams_rf","text":"Set hyparameters random forest models","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set hyparameters for random forest models — set_hparams_rf","text":"","code":"set_hparams_rf(n_features)"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set hyparameters for random forest models — set_hparams_rf","text":"n_features number features dataset","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set hyparameters for random forest models — set_hparams_rf","text":"named list hyperparameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set hyparameters for random forest models — set_hparams_rf","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set hyparameters for random forest models — set_hparams_rf","text":"","code":"if (FALSE) { # \\dontrun{ set_hparams_rf(16) set_hparams_rf(2000) set_hparams_rf(1) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rpart2.html","id":null,"dir":"Reference","previous_headings":"","what":"Set hyperparameters for decision tree models — set_hparams_rpart2","title":"Set hyperparameters for decision tree models — set_hparams_rpart2","text":"Set hyperparameters decision tree models","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rpart2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set hyperparameters for decision tree models — set_hparams_rpart2","text":"","code":"set_hparams_rpart2(n_samples)"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rpart2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set hyperparameters for decision tree models — set_hparams_rpart2","text":"n_samples number samples dataset","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rpart2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set hyperparameters for decision tree models — set_hparams_rpart2","text":"named list hyperparameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rpart2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set hyperparameters for decision tree models — set_hparams_rpart2","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_rpart2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set hyperparameters for decision tree models — set_hparams_rpart2","text":"","code":"if (FALSE) { # \\dontrun{ set_hparams_rpart2(100) set_hparams_rpart2(20) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_svmRadial.html","id":null,"dir":"Reference","previous_headings":"","what":"Set hyperparameters for SVM with radial kernel — set_hparams_svmRadial","title":"Set hyperparameters for SVM with radial kernel — set_hparams_svmRadial","text":"Set hyperparameters SVM radial kernel","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_svmRadial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set hyperparameters for SVM with radial kernel — set_hparams_svmRadial","text":"","code":"set_hparams_svmRadial()"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_svmRadial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set hyperparameters for SVM with radial kernel — set_hparams_svmRadial","text":"named list hyperparameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_svmRadial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set hyperparameters for SVM with radial kernel — set_hparams_svmRadial","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_svmRadial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set hyperparameters for SVM with radial kernel — set_hparams_svmRadial","text":"","code":"if (FALSE) { # \\dontrun{ set_hparams_svmRadial() } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_xgbTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","title":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","text":"Set hyperparameters SVM radial kernel","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_xgbTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","text":"","code":"set_hparams_xgbTree(n_samples)"},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_xgbTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","text":"n_samples number samples dataset","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_xgbTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","text":"named list hyperparameters","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_xgbTree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","text":"Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/set_hparams_xgbTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set hyperparameters for SVM with radial kernel — set_hparams_xgbTree","text":"","code":"if (FALSE) { # \\dontrun{ set_hparams_xgbTree() } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/shared_ggprotos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get plot layers shared by plot_mean_roc and plot_mean_prc — shared_ggprotos","title":"Get plot layers shared by plot_mean_roc and plot_mean_prc — shared_ggprotos","text":"Get plot layers shared plot_mean_roc plot_mean_prc","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shared_ggprotos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get plot layers shared by plot_mean_roc and plot_mean_prc — shared_ggprotos","text":"","code":"shared_ggprotos(ribbon_fill = \"#D9D9D9\", line_color = \"#000000\")"},{"path":"http://www.schlosslab.org/mikropml/reference/shared_ggprotos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get plot layers shared by plot_mean_roc and plot_mean_prc — shared_ggprotos","text":"ribbon_fill ribbon fill color (default: \"#D9D9D9\") line_color line color (default: \"#000000\")","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shared_ggprotos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get plot layers shared by plot_mean_roc and plot_mean_prc — shared_ggprotos","text":"list ggproto objects add ggplot","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shared_ggprotos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get plot layers shared by plot_mean_roc and plot_mean_prc — shared_ggprotos","text":"Kelly Sovacool sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shuffle_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle the rows in a column — shuffle_group","title":"Shuffle the rows in a column — shuffle_group","text":"Shuffle rows column","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shuffle_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle the rows in a column — shuffle_group","text":"","code":"shuffle_group(dat, col_name)"},{"path":"http://www.schlosslab.org/mikropml/reference/shuffle_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle the rows in a column — shuffle_group","text":"dat data frame containing col_name col_name column name shuffle","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shuffle_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle the rows in a column — shuffle_group","text":"dat rows col_name shuffled","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shuffle_group.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shuffle the rows in a column — shuffle_group","text":"Courtney R Armour, armourc@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/shuffle_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle the rows in a column — shuffle_group","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(123) df <- dplyr::tibble(   condition = c(\"a\", \"a\", \"b\", \"b\"),   AUC = c(.2, 0.3, 0.8, 0.9) ) shuffle_group(df, \"condition\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/split_outcome_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Split dataset into outcome and features — split_outcome_features","title":"Split dataset into outcome and features — split_outcome_features","text":"Split dataset outcome features","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/split_outcome_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split dataset into outcome and features — split_outcome_features","text":"","code":"split_outcome_features(dataset, outcome_colname)"},{"path":"http://www.schlosslab.org/mikropml/reference/split_outcome_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split dataset into outcome and features — split_outcome_features","text":"dataset Data frame outcome variable columns features. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically).","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/split_outcome_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split dataset into outcome and features — split_outcome_features","text":"list length two: outcome, features (dataframes)","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/split_outcome_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split dataset into outcome and features — split_outcome_features","text":"","code":"if (FALSE) { # \\dontrun{ split_outcome_features(mikropml::otu_mini_bin, \"dx\") } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/tidy_perf_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy the performance dataframe — tidy_perf_data","title":"Tidy the performance dataframe — tidy_perf_data","text":"Used plot_model_performance().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/tidy_perf_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy the performance dataframe — tidy_perf_data","text":"","code":"tidy_perf_data(performance_df)"},{"path":"http://www.schlosslab.org/mikropml/reference/tidy_perf_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy the performance dataframe — tidy_perf_data","text":"performance_df dataframe performance results multiple calls run_ml()","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/tidy_perf_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy the performance dataframe — tidy_perf_data","text":"Tidy dataframe model performance metrics.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/tidy_perf_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tidy the performance dataframe — tidy_perf_data","text":"Begüm Topçuoglu, topcuoglu.begum@gmail.com Kelly Sovacool, sovacool@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/tidy_perf_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy the performance dataframe — tidy_perf_data","text":"","code":"if (FALSE) { # \\dontrun{ # call `run_ml()` multiple times with different seeds results_lst <- lapply(seq(100, 104), function(seed) {   run_ml(otu_small, \"glmnet\", seed = seed) }) # extract and combine the performance results perf_df <- lapply(results_lst, function(result) {   result[[\"performance\"]] }) %>%   dplyr::bind_rows() # make it pretty! tidy_perf_data(perf_df) } # }"},{"path":"http://www.schlosslab.org/mikropml/reference/train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train model using caret::train(). — train_model","title":"Train model using caret::train(). — train_model","text":"Train model using caret::train().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train model using caret::train(). — train_model","text":"","code":"train_model(   train_data,   outcome_colname,   method,   cv,   perf_metric_name,   tune_grid,   ... )"},{"path":"http://www.schlosslab.org/mikropml/reference/train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train model using caret::train(). — train_model","text":"train_data Training data. Expected subset full dataset. outcome_colname Column name string outcome variable (default NULL; first column chosen automatically). method ML method. Options: c(\"glmnet\", \"rf\", \"rpart2\", \"svmRadial\", \"xgbTree\"). glmnet: linear, logistic, multiclass regression rf: random forest rpart2: decision tree svmRadial: support vector machine xgbTree: xgboost cv Cross-validation caret scheme define_cv(). perf_metric_name column name output function provided perf_metric_function used performance metric. Defaults: binary classification = \"ROC\", multi-class classification = \"logLoss\", regression = \"RMSE\". tune_grid Tuning grid get_tuning_grid().#' ... additional arguments passed caret::train(), case weights via weights argument ntree rf models. See caret::train() docs details.","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train model using caret::train(). — train_model","text":"Trained model caret::train().","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/train_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train model using caret::train(). — train_model","text":"Zena Lapp, zenalapp@umich.edu","code":""},{"path":"http://www.schlosslab.org/mikropml/reference/train_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train model using caret::train(). — train_model","text":"","code":"if (FALSE) { # \\dontrun{ training_data <- otu_mini_bin_results_glmnet$trained_model$trainingData %>%   dplyr::rename(dx = .outcome) method <- \"rf\" hyperparameters <- get_hyperparams_list(otu_mini_bin, method) cross_val <- define_cv(training_data,   \"dx\",   hyperparameters,   perf_metric_function = caret::multiClassSummary,   class_probs = TRUE,   cv_times = 2 ) tune_grid <- get_tuning_grid(hyperparameters, method)  rf_model <- train_model(   training_data,   \"dx\",   method,   cross_val,   \"AUC\",   tune_grid,   ntree = 1000 ) rf_model$results %>% dplyr::select(mtry, AUC, prAUC) } # }"},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-161","dir":"Changelog","previous_headings":"","what":"mikropml 1.6.1","title":"mikropml 1.6.1","text":"CRAN release: 2023-08-21 Fix roxygen package doc syntax (https://github.com/r-lib/roxygen2/issues/1491, @kelly-sovacool).","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-160","dir":"Changelog","previous_headings":"","what":"mikropml 1.6.0","title":"mikropml 1.6.0","text":"CRAN release: 2023-04-14 bootstrap_performance() allows calculate confidence intervals model performance single train/test split bootstrapping test set (#329, @kelly-sovacool). calc_balanced_precision() allows calculate balanced precision balanced area precision-recall curve (#333, @kelly-sovacool). Renamed column names feat represent feature group correlated features. New column lower upper report bounds empirical 95% confidence interval permutation test. See vignette('parallel') example plotting feature importance confidence intervals. Minor documentation improvements (#323, #332, @kelly-sovacool).","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-150","dir":"Changelog","previous_headings":"","what":"mikropml 1.5.0","title":"mikropml 1.5.0","text":"CRAN release: 2023-01-16 New example showing plot feature importances parallel vignette (#310, @kelly-sovacool). can now use parRF, parallel implementation rf method, default hyperparameters rf set automatically (#306, @kelly-sovacool). calc_model_sensspec() - calculate sensitivity, specificity, precision model. calc_mean_roc() & plot_mean_roc() - calculate & plot specificity mean sensitivity multiple models. calc_mean_prc() & plot_mean_prc() - calculate & plot recall mean precision multiple models.","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-140","dir":"Changelog","previous_headings":"","what":"mikropml 1.4.0","title":"mikropml 1.4.0","text":"CRAN release: 2022-10-16 Users can now pass model-specific arguments (e.g. weights) caret::train(), allowing greater flexibility. Improved tests (#298, #300, #303 #kelly-sovacool) Minor documentation improvements.","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-130","dir":"Changelog","previous_headings":"","what":"mikropml 1.3.0","title":"mikropml 1.3.0","text":"CRAN release: 2022-05-20 mikropml now requires R version 4.1.0 greater due update randomForest package (#292). New function compare_models() compares performance two models permutation test (#295, @courtneyarmour). Fixed bug cv_times affect reported repeats cross-validation (#291, @kelly-sovacool). Made minor documentation improvements (#293, @kelly-sovacool)","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-122","dir":"Changelog","previous_headings":"","what":"mikropml 1.2.2","title":"mikropml 1.2.2","text":"CRAN release: 2022-02-03 minor patch fixes test failure platforms long doubles. actual package code remains unchanged.","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-121","dir":"Changelog","previous_headings":"","what":"mikropml 1.2.1","title":"mikropml 1.2.1","text":"CRAN release: 2022-01-30 using groups parameter, groups kept together cross-validation partitions kfold <= number groups training set. Previously, error thrown condition met. Now, enough groups training set groups kept together CV, groups allowed split across CV partitions. Report p-values permutation feature importance (#288, @kelly-sovacool).","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-120","dir":"Changelog","previous_headings":"","what":"mikropml 1.2.0","title":"mikropml 1.2.0","text":"CRAN release: 2021-11-10 Also added new parameter calculate_performance, controls whether performance metrics calculated (default: TRUE). Users may wish skip performance calculations training models cross-validation. New parameter group_partitions added run_ml() allows users control groups go partition train/test split (#281, @kelly-sovacool). default, training_frac fraction 0 1 specifies much dataset used training fraction train/test split. Users can instead give training_frac vector indices correspond rows dataset go training fraction train/test split. gives users direct control exactly observations training fraction desired.","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-111","dir":"Changelog","previous_headings":"","what":"mikropml 1.1.1","title":"mikropml 1.1.1","text":"CRAN release: 2021-09-14 Also, group_correlated_features() now user-facing function.","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-110","dir":"Changelog","previous_headings":"","what":"mikropml 1.1.0","title":"mikropml 1.1.0","text":"CRAN release: 2021-08-10 default still “spearman”, now can use methods supported stats::cor corr_method parameter: get_feature_importance(corr_method = \"pearson\") now video tutorials covering mikropml skills related machine learning, created @pschloss (#270). Fixed bug preprocess_data() converted outcome column character vector (#273, @kelly-sovacool, @ecmaggioncalda).","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-100","dir":"Changelog","previous_headings":"","what":"mikropml 1.0.0","title":"mikropml 1.0.0","text":"CRAN release: 2021-05-13 mikropml now logo created @NLesniak! Made documentation improvements (#238, #231 @kelly-sovacool; #256 @BTopcuoglu). Remove features appear N=prefilter_threshold fewer rows data. Created function remove_singleton_columns() called preprocess_data() carry . Provide custom groups features permute together permutation importance. groups NULL default; case, correlated features corr_thresh grouped together. preprocess_data() now replaces spaces outcome column underscores (#247, @kelly-sovacool, @JonnyTran). Clarify intro vignette support multi-label outcomes. (#254, @zenalapp) Optional progress bar preprocess_data() get_feature_importance() using progressr package (#257, @kelly-sovacool, @JonnyTran, @FedericoComoglio). mikropml paper soon published JOSS!","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-002","dir":"Changelog","previous_headings":"","what":"mikropml 0.0.2","title":"mikropml 0.0.2","text":"CRAN release: 2020-12-03 Fixed test failure Solaris. Fixed multiple test failures R 3.6.2 due stringsAsFactors behavior. Made minor documentation improvements. Moved rpart Suggests Imports consistency packages used model training.","code":""},{"path":"http://www.schlosslab.org/mikropml/news/index.html","id":"mikropml-001","dir":"Changelog","previous_headings":"","what":"mikropml 0.0.1","title":"mikropml 0.0.1","text":"CRAN release: 2020-11-23 first release version mikropml! 🎉 Added NEWS.md file track changes package. run_ml() preprocess_data() plot_model_performance() plot_hp_performance() glmnet: logistic linear regression rf: random forest rpart2: decision trees svmRadial: support vector machines xgbTree: gradient-boosted trees Introduction Preprocess data Hyperparameter tuning Parallel processing mikropml paper","code":""}]
